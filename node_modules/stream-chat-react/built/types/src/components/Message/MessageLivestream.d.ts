import React from 'react';
import type { MessageUIComponentProps, MouseEventHandler } from './types';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../../types/types';
declare type PropsDrilledToMessageLivestreamActions = 'addNotification' | 'channelConfig' | 'formatDate' | 'getMessageActions' | 'handleOpenThread' | 'initialMessage' | 'message' | 'setEditingState' | 'threadList';
export declare type MessageLivestreamActionsProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = Pick<MessageUIComponentProps<At, Ch, Co, Ev, Me, Re, Us>, PropsDrilledToMessageLivestreamActions> & {
    messageWrapperRef: React.RefObject<HTMLDivElement>;
    onReactionListClick: MouseEventHandler;
};
/**
 * MessageLivestream - handles the rendering of a message and depends on the Message component for all the logic.
 * Implements the look and feel for a livestream use case.
 * @example ./MessageLivestream.md
 */
export declare const MessageLivestream: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(props: MessageUIComponentProps<At, Ch, Co, Ev, Me, Re, Us, import("../../../types/types").CustomTrigger>) => JSX.Element;
export {};
//# sourceMappingURL=MessageLivestream.d.ts.map