import React from 'react';
import { CommandItemProps } from '../CommandItem/CommandItem';
import { EmoticonItemProps } from '../EmoticonItem/EmoticonItem';
import { LoadingIndicatorProps } from '../Loading/LoadingIndicator';
import { UserItemProps } from '../UserItem/UserItem';
import type { EmojiData } from 'emoji-mart';
import type { CommandResponse, UserFilters, UserOptions, UserResponse, UserSort } from 'stream-chat';
import type { CustomTrigger, DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultMessageType, DefaultUserType, UnknownType } from '../../../types/types';
declare type ObjectUnion<T> = T[keyof T];
export declare type SuggestionItemProps<Co extends DefaultCommandType = DefaultCommandType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    className: string;
    component: JSX.Element;
    item: EmojiData | SuggestionUser<Us> | SuggestionCommand<Co>;
    key: React.Key;
    onClickHandler: React.MouseEventHandler<HTMLDivElement>;
    onSelectHandler: (item: EmojiData | SuggestionUser<Us> | SuggestionCommand<Co>) => void;
    selected: boolean;
    style: React.CSSProperties;
};
export declare type SuggestionListProps<Co extends DefaultCommandType = DefaultCommandType, Us extends DefaultUserType<Us> = DefaultUserType, V extends CustomTrigger = CustomTrigger> = ObjectUnion<{
    [key in keyof TriggerSettings<Co, Us, V>]: {
        component: TriggerSettings<Co, Us, V>[key]['component'];
        dropdownScroll: (element: HTMLDivElement) => void;
        getSelectedItem: ((item: Parameters<TriggerSettings<Co, Us, V>[key]['output']>[0]) => void) | null;
        getTextToReplace: (item: Parameters<TriggerSettings<Co, Us, V>[key]['output']>[0]) => {
            caretPosition: 'start' | 'end' | 'next' | number;
            text: string;
            key?: string;
        };
        onSelect: (newToken: {
            caretPosition: 'start' | 'end' | 'next' | number;
            text: string;
        }) => void;
        values: Parameters<Parameters<TriggerSettings<Co, Us, V>[key]['dataProvider']>[2]>[0];
        className?: string;
        itemClassName?: string;
        itemStyle?: React.CSSProperties;
        style?: React.CSSProperties;
        value?: string;
    };
}>;
export declare type SuggestionCommand<Co extends DefaultCommandType = DefaultCommandType> = CommandResponse<Co>;
export declare type SuggestionUser<Us extends DefaultUserType<Us> = DefaultUserType> = UserResponse<Us>;
export declare type TriggerSetting<T extends UnknownType = UnknownType, U = UnknownType> = {
    component: string | React.ComponentType<T>;
    dataProvider: (query: string, text: string, onReady: (data: (U | undefined)[], token: string) => void) => U[];
    output: (entity: U) => {
        caretPosition: 'start' | 'end' | 'next' | number;
        text: string;
        key?: string;
    } | string | null;
    callback?: (item: U) => void;
};
export declare type CommandTriggerSetting<Co extends DefaultCommandType = DefaultCommandType> = TriggerSetting<Partial<CommandItemProps>, SuggestionCommand<Co>>;
export declare type EmojiTriggerSetting = TriggerSetting<Partial<EmoticonItemProps>, EmojiData>;
export declare type UserTriggerSetting<Us extends DefaultUserType<Us> = DefaultUserType> = TriggerSetting<Partial<UserItemProps>, SuggestionUser<Us>>;
export declare type TriggerSettings<Co extends DefaultCommandType = DefaultCommandType, Us extends DefaultUserType<Us> = DefaultUserType, V extends CustomTrigger = CustomTrigger> = {
    [key in keyof V]: TriggerSetting<V[key]['componentProps'], V[key]['data']>;
} & {
    '/': CommandTriggerSetting<Co>;
    ':': EmojiTriggerSetting;
    '@': UserTriggerSetting<Us>;
};
export declare type MentionQueryParams<Us extends DefaultUserType<Us> = DefaultUserType> = {
    filters?: UserFilters<Us>;
    options?: UserOptions;
    sort?: UserSort<Us>;
};
export declare type ChatAutoCompleteProps<Co extends DefaultCommandType = DefaultCommandType, Us extends DefaultUserType<Us> = DefaultUserType, V extends CustomTrigger = CustomTrigger> = {
    innerRef: React.MutableRefObject<HTMLTextAreaElement | undefined>;
    /** Any additional attributes that you may want to add for underlying HTML textarea element */
    additionalTextareaProps?: React.TextareaHTMLAttributes<HTMLTextAreaElement>;
    /** Array of commands */
    commands?: CommandResponse<Co>[];
    /** Make the textarea disabled */
    disabled?: boolean;
    /** Disable mentions */
    disableMentions?: boolean;
    /** Grow the number of rows of the textarea while you're typing */
    grow?: boolean;
    /** Function that runs on submit */
    handleSubmit?: React.FormEventHandler<HTMLFormElement>;
    /** What loading component to use for the auto complete when loading results. */
    LoadingIndicator?: React.ElementType<LoadingIndicatorProps>;
    /** Maximum number of rows */
    maxRows?: number;
    /** If true, the suggestion list will search all app users, not just current channel members/watchers. Default: false. */
    mentionAllAppUsers?: boolean;
    /** Object containing filters/sort/options overrides for mentions user query */
    mentionQueryParams?: MentionQueryParams<Us>;
    /** Minimum number of characters */
    minChar?: number;
    /** Function that runs on change */
    onChange?: React.ChangeEventHandler<HTMLTextAreaElement>;
    /** Listener for onfocus event on textarea */
    onFocus?: React.FocusEventHandler<HTMLTextAreaElement>;
    /** Function to run on pasting within the textarea */
    onPaste?: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
    /** Handler for selecting item from suggestions list */
    onSelectItem?: (item: UserResponse<Us>) => void;
    /** Placeholder for the textarea */
    placeholder?: string;
    /** The number of rows you want the textarea to have */
    rows?: number;
    /**
     * Optional UI component prop to override the default suggestion Item component.
     * Defaults to and accepts same props as: [Item](https://github.com/GetStream/stream-chat-react/blob/master/src/components/AutoCompleteTextarea/Item.js)
     */
    SuggestionItem?: React.ForwardRefExoticComponent<SuggestionItemProps<Co, Us>>;
    /**
     * Optional UI component prop to override the default List component that displays suggestions.
     * Defaults to and accepts same props as: [List](https://github.com/GetStream/stream-chat-react/blob/master/src/components/AutoCompleteTextarea/List.js)
     */
    SuggestionList?: React.ComponentType<SuggestionListProps<Co, Us, V>>;
    /** The triggers for the textarea */
    triggers?: TriggerSettings<Co, Us, V>;
    /** The value of the textarea */
    value?: string;
};
export declare const ChatAutoComplete: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>, V extends CustomTrigger = CustomTrigger>(props: ChatAutoCompleteProps<Co, Us, V>) => JSX.Element;
export {};
//# sourceMappingURL=ChatAutoComplete.d.ts.map