import React from 'react';
import { MessageInputProps } from '../MessageInput/MessageInput';
import { MessageListProps } from '../MessageList/MessageList';
import { StreamMessage } from '../../context/ChannelContext';
import type { TFunction } from 'i18next';
import type { MessageProps, MessageUIComponentProps } from '../Message/types';
import type { CustomTrigger, DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../../types/types';
export declare type ThreadProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType, V extends CustomTrigger = CustomTrigger> = {
    /**
     * Additional props for underlying MessageInput component.
     * [Available props](https://getstream.github.io/stream-chat-react/#messageinput)
     */
    additionalMessageInputProps?: MessageInputProps<At, Ch, Co, Ev, Me, Re, Us, V>;
    /**
     * Additional props for underlying MessageList component.
     * [Available props](https://getstream.github.io/stream-chat-react/#messagelist)
     * */
    additionalMessageListProps?: MessageListProps<At, Ch, Co, Ev, Me, Re, Us>;
    /**
     * Additional props for underlying Message component of parent message at the top.
     * [Available props](https://getstream.github.io/stream-chat-react/#message)
     * */
    additionalParentMessageProps?: MessageProps<At, Ch, Co, Ev, Me, Re, Us>;
    /** Make input focus on mounting thread */
    autoFocus?: boolean;
    /** Display the thread on 100% width of it's container. Useful for mobile style view */
    fullWidth?: boolean;
    /** UI component to override the default Message stored in ChannelContext */
    Message?: React.ComponentType<MessageUIComponentProps<At, Ch, Co, Ev, Me, Re, Us>>;
    /** Customized MessageInput component to used within Thread instead of default MessageInput
       Useable as follows:
       ```
       <Thread MessageInput={(props) => <MessageInput parent={props.parent} Input={MessageInputSmall} /> }/>
       ```
   */
    MessageInput?: React.ComponentType<MessageInputProps<At, Ch, Co, Ev, Me, Re, Us, V>>;
    /** UI component used to override the default header of the Thread */
    ThreadHeader?: React.ComponentType<ThreadHeaderProps<At, Ch, Co, Ev, Me, Re, Us>>;
};
/**
 * Thread - The Thread renders a parent Message with a list of replies. Use the standard MessageList of the main Channel's Messages.
 * The Thread is only used for the list of replies to a message.
 * Underlying MessageList, MessageInput and Message components can be customized using props:
 * - additionalParentMessageProps
 * - additionalMessageListProps
 * - additionalMessageInputProps
 * @example ./Thread.md
 */
export declare const Thread: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>, V extends CustomTrigger = CustomTrigger>(props: ThreadProps<At, Ch, Co, Ev, Me, Re, Us, V>) => JSX.Element | null;
export declare type ThreadHeaderProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    t: TFunction;
    closeThread?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    thread?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>;
};
//# sourceMappingURL=Thread.d.ts.map