import React, { RefObject } from 'react';
import { InfiniteScrollProps } from '../InfiniteScrollPaginator';
import type { Channel, StreamChat, UserResponse } from 'stream-chat';
import type { DateSeparatorProps } from '../DateSeparator/DateSeparator';
import type { EmptyStateIndicatorProps } from '../EmptyStateIndicator/EmptyStateIndicator';
import type { EventComponentProps } from '../EventComponent/EventComponent';
import type { MessageProps } from '../Message/types';
import type { TypingIndicatorProps } from '../TypingIndicator/TypingIndicator';
import type { StreamMessage } from '../../context/ChannelContext';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../../types/types';
export declare type MessageListInnerProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    bottomRef: RefObject<HTMLDivElement>;
    /** The currently active channel */
    channel: Channel<At, Ch, Co, Ev, Me, Re, Us>;
    /** Available from [ChatContext](https://getstream.github.io/stream-chat-react/#chat) */
    client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>;
    /**
     * Date separator UI component to render
     * Defaults to and accepts same props as: [DateSeparator](https://github.com/GetStream/stream-chat-react/blob/master/src/components/DateSeparator.tsx)
     */
    DateSeparator: React.ComponentType<DateSeparatorProps>;
    /**
     * The messages to render in the list
     * Defaults to the messages stored in [ChannelContext](https://getstream.github.io/stream-chat-react/#section-channelcontext)
     * */
    messages: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    /** Set to `true` to turn off grouping of messages by user */
    noGroupByUser: boolean;
    onMessageLoadCaptured: (event: React.SyntheticEvent<HTMLLIElement, Event>) => void;
    /** Set to `true` to indicate that the list is a thread  */
    threadList: boolean;
    /**
     * Typing indicator UI component to render
     * Defaults to and accepts same props as: [TypingIndicator](https://github.com/GetStream/stream-chat-react/blob/master/src/components/TypingIndicator/TypingIndicator.tsx)
     */
    TypingIndicator: React.ComponentType<TypingIndicatorProps>;
    /** Disables the injection of date separator components, defaults to `false` */
    disableDateSeparator?: boolean;
    /** The UI Indicator to use when `MessageList` or `ChannelList` is empty  */
    EmptyStateIndicator?: React.ComponentType<EmptyStateIndicatorProps>;
    /** Component to render at the top of the MessageList */
    HeaderComponent?: React.ComponentType;
    headerPosition?: number;
    /** Hides the MessageDeleted components from the list, defaults to `false` */
    hideDeletedMessages?: boolean;
    /** Overrides the default props passed to [InfiniteScroll](https://github.com/GetStream/stream-chat-react/blob/master/src/components/InfiniteScrollPaginator/InfiniteScroll.tsx) */
    internalInfiniteScrollProps?: InfiniteScrollProps;
    /** Overrides the default props passed to [Message](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Message/Message.tsx) */
    internalMessageProps?: Omit<MessageProps<At, Ch, Co, Ev, Me, Re, Us>, 'message'>;
    /**
     * Custom UI component to display system messages
     * Defaults to and accepts same props as: [EventComponent](https://github.com/GetStream/stream-chat-react/blob/master/src/components/EventComponent.tsx)
     */
    MessageSystem?: React.ComponentType<EventComponentProps<At, Ch, Co, Ev, Me, Re, Us>>;
    read?: Record<string, {
        last_read: Date;
        user: UserResponse<Us>;
    }>;
};
export declare type GroupStyle = '' | 'middle' | 'top' | 'bottom' | 'single';
export declare const MessageListInner: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(props: MessageListInnerProps<At, Ch, Co, Ev, Me, Re, Us>) => JSX.Element;
//# sourceMappingURL=MessageListInner.d.ts.map