import React from 'react';
import { MessageListInnerProps } from './MessageListInner';
import { LoadingIndicatorProps } from '../Loading';
import { ChannelContextValue, TranslationContextValue } from '../../context';
import type { StreamChat } from 'stream-chat';
import type { MessageProps } from '../Message/types';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../../types/types';
export declare type MessageListWithContextProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = Omit<ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>, 'client' | 'typing'> & TranslationContextValue & MessageListProps<At, Ch, Co, Ev, Me, Re, Us> & {
    /** The client connection object for connecting to Stream */
    client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>;
};
declare type PropsDrilledToMessage = 'additionalMessageInputProps' | 'Attachment' | 'Avatar' | 'Message' | 'getFlagMessageErrorNotification' | 'getFlagMessageErrorNotification' | 'getFlagMessageSuccessNotification' | 'getMuteUserErrorNotification' | 'getMuteUserSuccessNotification' | 'getPinMessageErrorNotification' | 'messageActions' | 'mutes' | 'onUserClick' | 'onUserHover' | 'pinPermissions' | 'unsafeHTML';
declare type PropsDrilledToMessageListInner = 'DateSeparator' | 'disableDateSeparator' | 'EmptyStateIndicator' | 'HeaderComponent' | 'headerPosition' | 'hideDeletedMessages' | 'internalInfiniteScrollProps' | 'messages' | 'MessageSystem' | 'noGroupByUser' | 'read' | 'threadList' | 'TypingIndicator';
export declare type MessageListProps<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = Partial<Pick<MessageProps<At, Ch, Co, Ev, Me, Re, Us>, PropsDrilledToMessage>> & Partial<Pick<MessageListInnerProps<At, Ch, Co, Ev, Me, Re, Us>, PropsDrilledToMessageListInner>> & {
    /** Whether or not the list has more items to load */
    hasMore?: boolean;
    /** Component to render at the top of the MessageList while loading new messages */
    LoadingIndicator?: React.ComponentType<LoadingIndicatorProps>;
    /** Whether or not the list is currently loading more items */
    loadingMore?: boolean;
    /** Function called when more messages are to be loaded */
    loadMore?: ((limit: number) => Promise<number>) | (() => Promise<void>);
    /** The limit to use when paginating messages. */
    messageLimit?: number;
    /** The pixel threshold to determine whether or not the user is scrolled up in the list.
     * @default 200px
     */
    scrolledUpThreshold?: number;
};
/**
 * The MessageList component renders a list of Messages.
 * It is a consumer of the [ChannelContext](https://getstream.github.io/stream-chat-react/#section-channelcontext).
 * @example ./MessageList.md
 */
export declare const MessageList: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>>(props: MessageListProps<At, Ch, Co, Ev, Me, Re, Us>) => JSX.Element;
export {};
//# sourceMappingURL=MessageList.d.ts.map