import React, { PropsWithChildren } from 'react';
import type { Data as EmojiMartData, NimbleEmojiIndex, NimbleEmojiProps, NimblePickerProps } from 'emoji-mart';
import type { Attachment, Channel, MessageResponse, Mute, ChannelState as StreamChannelState, StreamChat, UpdatedMessage, UpdateMessageAPIResponse, UserResponse } from 'stream-chat';
import type { AttachmentProps } from '../components/Attachment/Attachment';
import type { ChannelStateReducerAction } from '../components/Channel/channelState';
import type { MessageUIComponentProps } from '../components/Message/types';
import type { DefaultAttachmentType, DefaultChannelType, DefaultCommandType, DefaultEventType, DefaultMessageType, DefaultReactionType, DefaultUserType } from '../../types/types';
export declare type ChannelNotifications = Array<{
    id: string;
    text: string;
    type: 'success' | 'error';
}>;
export declare type CommonEmoji = {
    custom: boolean;
    emoticons: [];
    short_names: [];
};
export declare type EmojiSetDef = {
    sheetColumns: number;
    sheetRows: number;
    sheetSize: number;
    size: number;
    spriteUrl: string;
};
export declare type MinimalEmoji = CommonEmoji & EmojiSetDef & {
    colons: string;
    id: string;
    name: string;
    sheet_x: number;
    sheet_y: number;
};
export declare type EmojiConfig = {
    commonEmoji: CommonEmoji;
    defaultMinimalEmojis: MinimalEmoji[];
    Emoji: React.ComponentType<NimbleEmojiProps>;
    emojiData: EmojiMartData;
    EmojiIndex: NimbleEmojiIndex;
    EmojiPicker: React.ComponentType<NimblePickerProps>;
    emojiSetDef: EmojiSetDef;
};
export declare type MessageAttachments<At extends DefaultAttachmentType = DefaultAttachmentType> = Array<Attachment<At> & {
    file_size?: number;
    mime_type?: string;
}>;
export declare type MessageToSend<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    attachments?: MessageAttachments<At>;
    errorStatusCode?: number;
    id?: string;
    mentioned_users?: UserResponse<Us>[];
    parent?: MessageResponse<At, Ch, Co, Me, Re, Us>;
    parent_id?: string;
    status?: string;
    text?: string;
};
export declare type RetrySendMessage<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>) => Promise<void>;
export declare type StreamMessage<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = ReturnType<StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['formatMessage']> | MessageResponse<At, Ch, Co, Me, Re, Us>;
export declare type ChannelState<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    error?: Error | null;
    hasMore?: boolean;
    loading?: boolean;
    loadingMore?: boolean;
    members?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['members'];
    messages?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    pinnedMessages?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    read?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['read'];
    thread?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us> | null;
    threadHasMore?: boolean;
    threadLoadingMore?: boolean;
    threadMessages?: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>[];
    typing?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['typing'];
    watcherCount?: number;
    watchers?: StreamChannelState<At, Ch, Co, Ev, Me, Re, Us>['watchers'];
};
export declare type ChannelContextValue<At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends DefaultCommandType = DefaultCommandType, Ev extends DefaultEventType = DefaultEventType, Me extends DefaultMessageType = DefaultMessageType, Re extends DefaultReactionType = DefaultReactionType, Us extends DefaultUserType<Us> = DefaultUserType> = ChannelState<At, Ch, Co, Ev, Me, Re, Us> & {
    addNotification: (text: string, type: 'success' | 'error') => void;
    channel: Channel<At, Ch, Co, Ev, Me, Re, Us>;
    client: StreamChat<At, Ch, Co, Ev, Me, Re, Us>;
    notifications: ChannelNotifications;
    acceptedFiles?: string[];
    Attachment?: React.ComponentType<AttachmentProps<At>>;
    closeThread?: (event: React.SyntheticEvent) => void;
    dispatch?: React.Dispatch<ChannelStateReducerAction<At, Ch, Co, Ev, Me, Re, Us>>;
    editMessage?: (message: UpdatedMessage<At, Ch, Co, Me, Re, Us>) => Promise<UpdateMessageAPIResponse<At, Ch, Co, Me, Re, Us> | void>;
    emojiConfig?: EmojiConfig;
    loadMore?: ((limit: number) => Promise<number>) | (() => Promise<void>);
    loadMoreThread?: () => Promise<void>;
    maxNumberOfFiles?: number;
    Message?: React.ComponentType<MessageUIComponentProps<At, Ch, Co, Ev, Me, Re, Us>>;
    multipleUploads?: boolean;
    mutes?: Mute<Us>[];
    onMentionsClick?: (event: React.MouseEvent<HTMLElement>, user: UserResponse<Us>[]) => void;
    onMentionsHover?: (event: React.MouseEvent<HTMLElement>, user: UserResponse<Us>[]) => void;
    openThread?: (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>, event: React.SyntheticEvent) => void;
    removeMessage?: (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>) => void;
    retrySendMessage?: RetrySendMessage<At, Ch, Co, Ev, Me, Re, Us>;
    sendMessage?: (message: MessageToSend<At, Ch, Co, Me, Re, Us>) => Promise<void>;
    updateMessage?: (message: StreamMessage<At, Ch, Co, Ev, Me, Re, Us>) => void;
    watcher_count?: number;
};
export declare const ChannelContext: React.Context<ChannelContextValue<DefaultAttachmentType, DefaultChannelType, string & {}, Record<string, unknown>, DefaultMessageType, Record<string, unknown>, DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>>;
export declare const ChannelProvider: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>({ children, value, }: React.PropsWithChildren<{
    value: ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>;
}>) => JSX.Element;
export declare const useChannelContext: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>() => ChannelContextValue<At, Ch, Co, Ev, Me, Re, Us>;
/**
 * Typescript currently does not support partial inference, so if ChannelContext
 * typing is desired while using the HOC withChannelContext, the Props for the
 * wrapped component must be provided as the first generic.
 */
export declare const withChannelContext: <P extends Record<string, unknown>, At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends string & {} = string & {}, Ev extends Record<string, unknown> = Record<string, unknown>, Me extends DefaultMessageType = DefaultMessageType, Re extends Record<string, unknown> = Record<string, unknown>, Us extends DefaultUserType<Us> = DefaultUserType<import("../../types/types").DefaultUserTypeInternal>>(Component: React.ComponentType<P>) => React.FC<Pick<P, Exclude<keyof P, "notifications" | "client" | "error" | "loading" | "mutes" | "channel" | "members" | "openThread" | "closeThread" | "read" | "typing" | "watchers" | "hasMore" | "messages" | "loadingMore" | "threadHasMore" | "threadMessages" | "loadMore" | "thread" | "addNotification" | "Attachment" | "Message" | "onMentionsClick" | "onMentionsHover" | "removeMessage" | "retrySendMessage" | "updateMessage" | "editMessage" | "maxNumberOfFiles" | "multipleUploads" | "sendMessage" | "dispatch" | "emojiConfig" | "acceptedFiles" | "watcher_count" | "pinnedMessages" | "threadLoadingMore" | "watcherCount" | "loadMoreThread">>>;
//# sourceMappingURL=ChannelContext.d.ts.map