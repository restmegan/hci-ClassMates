{"ast":null,"code":"'use strict';\n\nvar BYTE_UNITS = ['B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\nvar BIBYTE_UNITS = ['B', 'kiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\nvar BIT_UNITS = ['b', 'kbit', 'Mbit', 'Gbit', 'Tbit', 'Pbit', 'Ebit', 'Zbit', 'Ybit'];\nvar BIBIT_UNITS = ['b', 'kibit', 'Mibit', 'Gibit', 'Tibit', 'Pibit', 'Eibit', 'Zibit', 'Yibit'];\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/\n\nvar toLocaleString = function toLocaleString(number, locale) {\n  var result = number;\n\n  if (typeof locale === 'string' || Array.isArray(locale)) {\n    result = number.toLocaleString(locale);\n  } else if (locale === true) {\n    result = number.toLocaleString();\n  }\n\n  return result;\n};\n\nmodule.exports = function (number, options) {\n  if (!Number.isFinite(number)) {\n    throw new TypeError(\"Expected a finite number, got \".concat(typeof number, \": \").concat(number));\n  }\n\n  options = Object.assign({\n    bits: false,\n    binary: false\n  }, options);\n  var UNITS = options.bits ? options.binary ? BIBIT_UNITS : BIT_UNITS : options.binary ? BIBYTE_UNITS : BYTE_UNITS;\n\n  if (options.signed && number === 0) {\n    return \" 0 \".concat(UNITS[0]);\n  }\n\n  var isNegative = number < 0;\n  var prefix = isNegative ? '-' : options.signed ? '+' : '';\n\n  if (isNegative) {\n    number = -number;\n  }\n\n  if (number < 1) {\n    var _numberString = toLocaleString(number, options.locale);\n\n    return prefix + _numberString + ' ' + UNITS[0];\n  }\n\n  var exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1); // eslint-disable-next-line unicorn/prefer-exponentiation-operator\n\n  number = Number((number / Math.pow(options.binary ? 1024 : 1000, exponent)).toPrecision(3));\n  var numberString = toLocaleString(number, options.locale);\n  var unit = UNITS[exponent];\n  return prefix + numberString + ' ' + unit;\n};","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/ChatPageUI/node_modules/pretty-bytes/index.js"],"names":["BYTE_UNITS","BIBYTE_UNITS","BIT_UNITS","BIBIT_UNITS","toLocaleString","number","locale","result","Array","isArray","module","exports","options","Number","isFinite","TypeError","Object","assign","bits","binary","UNITS","signed","isNegative","prefix","numberString","exponent","Math","min","floor","log","log10","length","pow","toPrecision","unit"],"mappings":"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","sourcesContent":["'use strict';\n\nconst BYTE_UNITS = [\n\t'B',\n\t'kB',\n\t'MB',\n\t'GB',\n\t'TB',\n\t'PB',\n\t'EB',\n\t'ZB',\n\t'YB'\n];\n\nconst BIBYTE_UNITS = [\n\t'B',\n\t'kiB',\n\t'MiB',\n\t'GiB',\n\t'TiB',\n\t'PiB',\n\t'EiB',\n\t'ZiB',\n\t'YiB'\n];\n\nconst BIT_UNITS = [\n\t'b',\n\t'kbit',\n\t'Mbit',\n\t'Gbit',\n\t'Tbit',\n\t'Pbit',\n\t'Ebit',\n\t'Zbit',\n\t'Ybit'\n];\n\nconst BIBIT_UNITS = [\n\t'b',\n\t'kibit',\n\t'Mibit',\n\t'Gibit',\n\t'Tibit',\n\t'Pibit',\n\t'Eibit',\n\t'Zibit',\n\t'Yibit'\n];\n\n/*\nFormats the given number using `Number#toLocaleString`.\n- If locale is a string, the value is expected to be a locale-key (for example: `de`).\n- If locale is true, the system default locale is used for translation.\n- If no value for locale is specified, the number is returned unmodified.\n*/\nconst toLocaleString = (number, locale) => {\n\tlet result = number;\n\tif (typeof locale === 'string' || Array.isArray(locale)) {\n\t\tresult = number.toLocaleString(locale);\n\t} else if (locale === true) {\n\t\tresult = number.toLocaleString();\n\t}\n\n\treturn result;\n};\n\nmodule.exports = (number, options) => {\n\tif (!Number.isFinite(number)) {\n\t\tthrow new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n\t}\n\n\toptions = Object.assign({bits: false, binary: false}, options);\n\n\tconst UNITS = options.bits ?\n\t\t(options.binary ? BIBIT_UNITS : BIT_UNITS) :\n\t\t(options.binary ? BIBYTE_UNITS : BYTE_UNITS);\n\n\tif (options.signed && number === 0) {\n\t\treturn ` 0 ${UNITS[0]}`;\n\t}\n\n\tconst isNegative = number < 0;\n\tconst prefix = isNegative ? '-' : (options.signed ? '+' : '');\n\n\tif (isNegative) {\n\t\tnumber = -number;\n\t}\n\n\tif (number < 1) {\n\t\tconst numberString = toLocaleString(number, options.locale);\n\t\treturn prefix + numberString + ' ' + UNITS[0];\n\t}\n\n\tconst exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);\n\t// eslint-disable-next-line unicorn/prefer-exponentiation-operator\n\tnumber = Number((number / Math.pow(options.binary ? 1024 : 1000, exponent)).toPrecision(3));\n\tconst numberString = toLocaleString(number, options.locale);\n\n\tconst unit = UNITS[exponent];\n\n\treturn prefix + numberString + ' ' + unit;\n};\n"]},"metadata":{},"sourceType":"module"}