{"ast":null,"code":"import _classCallCheck from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/InboxComponent.js\";\nimport Talk from \"talkjs\"; // Creates a TalkJS user assuming that the currentUser is passed as a prop to\n// our component. The Talk.User object is used to synchronize user data with\n// TalkJS, so we can display it inside the chat UI.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar InboxComponent = /*#__PURE__*/function (_Component) {\n  _inherits(InboxComponent, _Component);\n\n  var _super = _createSuper(InboxComponent);\n\n  //Creating a ref\n  function InboxComponent(props) {\n    var _this;\n\n    _classCallCheck(this, InboxComponent);\n\n    _this = _super.call(this, props);\n    _this.talkjsContainer = React.createRef();\n    return _this;\n  }\n\n  _createClass(InboxComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n      Talk.ready.then(function () {\n        var me = new Talk.User({\n          id: currentUser.id,\n          name: currentUser.name,\n          email: currentUser.email,\n          photoUrl: currentUser.photo,\n          welcomeMessage: \"Hey there! How are you? :-)\"\n        }); //Creating a TalkJS session. A session represents a user's active browser tab.\n        // It also authenticates your app with TalkJS.\n\n        window.talkSession = new Talk.Session({\n          appId: \"tNfx4wm8\",\n          //This is a custom appId generated from our TalkJS trial\n          me: me\n        }); // Hard-coded dummy user to test chatting with\n\n        var johnSmith = new Talk.User({\n          id: \"654321\",\n          name: \"John Smith\",\n          email: \"johnsmith@example.com\",\n          photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n          welcomeMessage: \"Hey, how can I help?\"\n        }); // Creating sample conversation\n\n        var conversation = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, johnSmith));\n        conversation.setParticipant(me);\n        conversation.setParticipant(johnSmith); // Creating an inbox\n\n        var inbox = window.talkSession.createInbox({\n          selected: conversation\n        });\n        inbox.mount(_this2.talkjsContainer.current); //Mounting the inbox\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.talkjsContainer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }, this);\n    }\n  }]);\n\n  return InboxComponent;\n}(Component);\n\nexport default InboxComponent;","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/InboxComponent.js"],"names":["Talk","InboxComponent","props","talkjsContainer","React","createRef","currentUser","ready","then","me","User","id","name","email","photoUrl","photo","welcomeMessage","window","talkSession","Session","appId","johnSmith","conversation","getOrCreateConversation","oneOnOneId","setParticipant","inbox","createInbox","selected","mount","current","Component"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;;;;IACMC,c;;;;;AAEJ;AACA,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,eAAL,GAAuBC,KAAK,CAACC,SAAN,EAAvB;AAFiB;AAGlB;;;;WAED,6BAAoB;AAAA;;AAChB,UAAMC,WAAW,GAAG,KAAKJ,KAAL,CAAWI,WAA/B;AACAN,MAAAA,IAAI,CAACO,KAAL,CAAWC,IAAX,CAAgB,YAAM;AACpB,YAAIC,EAAE,GAAG,IAAIT,IAAI,CAACU,IAAT,CAAc;AACrBC,UAAAA,EAAE,EAAEL,WAAW,CAACK,EADK;AAErBC,UAAAA,IAAI,EAAEN,WAAW,CAACM,IAFG;AAGrBC,UAAAA,KAAK,EAAEP,WAAW,CAACO,KAHE;AAIrBC,UAAAA,QAAQ,EAAER,WAAW,CAACS,KAJD;AAKrBC,UAAAA,cAAc,EAAE;AALK,SAAd,CAAT,CADoB,CASpB;AACA;;AACAC,QAAAA,MAAM,CAACC,WAAP,GAAqB,IAAIlB,IAAI,CAACmB,OAAT,CAAiB;AACpCC,UAAAA,KAAK,EAAE,UAD6B;AAChB;AACpBX,UAAAA,EAAE,EAAEA;AAFgC,SAAjB,CAArB,CAXoB,CAgBpB;;AACA,YAAIY,SAAS,GAAG,IAAIrB,IAAI,CAACU,IAAT,CAAc;AAC5BC,UAAAA,EAAE,EAAE,QADwB;AAE5BC,UAAAA,IAAI,EAAE,YAFsB;AAG5BC,UAAAA,KAAK,EAAE,uBAHqB;AAI5BC,UAAAA,QAAQ,EAAE,2CAJkB;AAK5BE,UAAAA,cAAc,EAAE;AALY,SAAd,CAAhB,CAjBoB,CAyBpB;;AACA,YAAIM,YAAY,GAAGL,MAAM,CAACC,WAAP,CAAmBK,uBAAnB,CAA2CvB,IAAI,CAACwB,UAAL,CAAgBf,EAAhB,EAAoBY,SAApB,CAA3C,CAAnB;AACAC,QAAAA,YAAY,CAACG,cAAb,CAA4BhB,EAA5B;AACAa,QAAAA,YAAY,CAACG,cAAb,CAA4BJ,SAA5B,EA5BoB,CA8BpB;;AACA,YAAIK,KAAK,GAAGT,MAAM,CAACC,WAAP,CAAmBS,WAAnB,CAA+B;AAACC,UAAAA,QAAQ,EAAEN;AAAX,SAA/B,CAAZ;AACAI,QAAAA,KAAK,CAACG,KAAN,CAAY,MAAI,CAAC1B,eAAL,CAAqB2B,OAAjC,EAhCoB,CAgCuB;AAC9C,OAjCC;AAkCH;;;WAED,kBAAS;AACP,0BAAO;AAAK,QAAA,GAAG,EAAE,KAAK3B;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;;;EAhD0B4B,S;;AAoD7B,eAAe9B,cAAf","sourcesContent":["import Talk from \"talkjs\";\n\n// Creates a TalkJS user assuming that the currentUser is passed as a prop to\n// our component. The Talk.User object is used to synchronize user data with\n// TalkJS, so we can display it inside the chat UI.\nclass InboxComponent extends Component {\n\n  //Creating a ref\n  constructor(props) {\n    super(props);\n    this.talkjsContainer = React.createRef();\n  }\n\n  componentDidMount() {\n      const currentUser = this.props.currentUser;\n      Talk.ready.then(() => {\n        var me = new Talk.User({\n          id: currentUser.id,\n          name: currentUser.name,\n          email: currentUser.email,\n          photoUrl: currentUser.photo,\n          welcomeMessage: \"Hey there! How are you? :-)\"\n        });\n\n        //Creating a TalkJS session. A session represents a user's active browser tab.\n        // It also authenticates your app with TalkJS.\n        window.talkSession = new Talk.Session({\n          appId: \"tNfx4wm8\",  //This is a custom appId generated from our TalkJS trial\n          me: me\n        });\n\n        // Hard-coded dummy user to test chatting with\n        var johnSmith = new Talk.User({\n          id: \"654321\",\n          name: \"John Smith\",\n          email: \"johnsmith@example.com\",\n          photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n          welcomeMessage: \"Hey, how can I help?\"\n        });\n\n        // Creating sample conversation\n        var conversation = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, johnSmith))\n        conversation.setParticipant(me);\n        conversation.setParticipant(johnSmith);\n\n        // Creating an inbox\n        var inbox = window.talkSession.createInbox({selected: conversation});\n        inbox.mount(this.talkjsContainer.current); //Mounting the inbox\n    });\n  }\n\n  render() {\n    return(<div ref={this.talkjsContainer}></div>)\n  }\n}\n\n\nexport default InboxComponent;\n"]},"metadata":{},"sourceType":"module"}