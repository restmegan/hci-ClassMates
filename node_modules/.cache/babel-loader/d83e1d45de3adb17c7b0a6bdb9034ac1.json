{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getMatchBounds = require('./getMatchBounds');\n\nvar _getMatchBounds2 = _interopRequireDefault(_getMatchBounds);\n\nvar _getOptionLabel = require('./getOptionLabel');\n\nvar _getOptionLabel2 = _interopRequireDefault(_getOptionLabel);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getHintText(_ref) {\n  var activeItem = _ref.activeItem,\n      initialItem = _ref.initialItem,\n      isMenuShown = _ref.isMenuShown,\n      labelKey = _ref.labelKey,\n      minLength = _ref.minLength,\n      selected = _ref.selected,\n      text = _ref.text; // Don't display a hint under the following conditions:\n\n  if ( // No text entered.\n  !text || // Text doesn't meet `minLength` threshold.\n  text.length < minLength || // The menu is hidden.\n  !isMenuShown || // No item in the menu.\n  !initialItem || // The initial item is a custom option.\n  initialItem.customOption || // One of the menu items is active.\n  activeItem || // There's already a selection.\n  !!selected.length) {\n    return '';\n  }\n\n  var initialItemStr = (0, _getOptionLabel2.default)(initialItem, labelKey);\n  var bounds = (0, _getMatchBounds2.default)(initialItemStr.toLowerCase(), text.toLowerCase());\n\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\n\nexports.default = getHintText;","map":{"version":3,"sources":["/Users/annaisthebest/Desktop/hci-ClassMates/node_modules/react-bootstrap-typeahead/lib/utils/getHintText.js"],"names":["Object","defineProperty","exports","value","_getMatchBounds","require","_getMatchBounds2","_interopRequireDefault","_getOptionLabel","_getOptionLabel2","obj","__esModule","default","getHintText","_ref","activeItem","initialItem","isMenuShown","labelKey","minLength","selected","text","length","customOption","initialItemStr","bounds","toLowerCase","start","slice","end"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,eAAe,GAAGC,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAIC,gBAAgB,GAAGC,sBAAsB,CAACH,eAAD,CAA7C;;AAEA,IAAII,eAAe,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAII,gBAAgB,GAAGF,sBAAsB,CAACC,eAAD,CAA7C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,SAASG,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;AAAA,MACIC,WAAW,GAAGF,IAAI,CAACE,WADvB;AAAA,MAEIC,WAAW,GAAGH,IAAI,CAACG,WAFvB;AAAA,MAGIC,QAAQ,GAAGJ,IAAI,CAACI,QAHpB;AAAA,MAIIC,SAAS,GAAGL,IAAI,CAACK,SAJrB;AAAA,MAKIC,QAAQ,GAAGN,IAAI,CAACM,QALpB;AAAA,MAMIC,IAAI,GAAGP,IAAI,CAACO,IANhB,CADyB,CASzB;;AACA,OACA;AACA,GAACA,IAAD,IACA;AACAA,EAAAA,IAAI,CAACC,MAAL,GAAcH,SAFd,IAGA;AACA,GAACF,WAJD,IAKA;AACA,GAACD,WAND,IAOA;AACAA,EAAAA,WAAW,CAACO,YARZ,IASA;AACAR,EAAAA,UAVA,IAWA;AACA,GAAC,CAACK,QAAQ,CAACE,MAdX,EAcmB;AACjB,WAAO,EAAP;AACD;;AAED,MAAIE,cAAc,GAAG,CAAC,GAAGf,gBAAgB,CAACG,OAArB,EAA8BI,WAA9B,EAA2CE,QAA3C,CAArB;AACA,MAAIO,MAAM,GAAG,CAAC,GAAGnB,gBAAgB,CAACM,OAArB,EAA8BY,cAAc,CAACE,WAAf,EAA9B,EAA4DL,IAAI,CAACK,WAAL,EAA5D,CAAb;;AAEA,MAAI,EAAED,MAAM,IAAIA,MAAM,CAACE,KAAP,KAAiB,CAA7B,CAAJ,EAAqC;AACnC,WAAO,EAAP;AACD,GAjCwB,CAmCzB;AACA;;;AACA,SAAON,IAAI,GAAGG,cAAc,CAACI,KAAf,CAAqBH,MAAM,CAACI,GAA5B,EAAiCL,cAAc,CAACF,MAAhD,CAAd;AACD;;AAEDpB,OAAO,CAACU,OAAR,GAAkBC,WAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getMatchBounds = require('./getMatchBounds');\n\nvar _getMatchBounds2 = _interopRequireDefault(_getMatchBounds);\n\nvar _getOptionLabel = require('./getOptionLabel');\n\nvar _getOptionLabel2 = _interopRequireDefault(_getOptionLabel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getHintText(_ref) {\n  var activeItem = _ref.activeItem,\n      initialItem = _ref.initialItem,\n      isMenuShown = _ref.isMenuShown,\n      labelKey = _ref.labelKey,\n      minLength = _ref.minLength,\n      selected = _ref.selected,\n      text = _ref.text;\n\n  // Don't display a hint under the following conditions:\n  if (\n  // No text entered.\n  !text ||\n  // Text doesn't meet `minLength` threshold.\n  text.length < minLength ||\n  // The menu is hidden.\n  !isMenuShown ||\n  // No item in the menu.\n  !initialItem ||\n  // The initial item is a custom option.\n  initialItem.customOption ||\n  // One of the menu items is active.\n  activeItem ||\n  // There's already a selection.\n  !!selected.length) {\n    return '';\n  }\n\n  var initialItemStr = (0, _getOptionLabel2.default)(initialItem, labelKey);\n  var bounds = (0, _getMatchBounds2.default)(initialItemStr.toLowerCase(), text.toLowerCase());\n\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  }\n\n  // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\n\nexports.default = getHintText;"]},"metadata":{},"sourceType":"script"}