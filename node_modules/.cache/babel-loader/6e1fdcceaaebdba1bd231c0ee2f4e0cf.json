{"ast":null,"code":"/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  var originalTransform = loadImage.transform;\n\n  loadImage.createCanvas = function (width, height, offscreen) {\n    if (offscreen && loadImage.global.OffscreenCanvas) {\n      return new OffscreenCanvas(width, height);\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  };\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(loadImage, loadImage.scale(img, options, data), options, callback, file, data);\n  }; // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options and data passed as arguments:\n\n\n  loadImage.transformCoordinates = function () {}; // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options, data passed as arguments:\n\n\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio;\n    var newOptions;\n    var i;\n    var width;\n    var height;\n\n    if (!aspectRatio) {\n      return options;\n    }\n\n    newOptions = {};\n\n    for (i in options) {\n      if (Object.prototype.hasOwnProperty.call(options, i)) {\n        newOptions[i] = options[i];\n      }\n    }\n\n    newOptions.crop = true;\n    width = img.naturalWidth || img.width;\n    height = img.naturalHeight || img.height;\n\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio;\n      newOptions.maxHeight = height;\n    } else {\n      newOptions.maxWidth = width;\n      newOptions.maxHeight = width / aspectRatio;\n    }\n\n    return newOptions;\n  }; // Canvas render method, allows to implement a different rendering algorithm:\n\n\n  loadImage.drawImage = function (img, canvas, sourceX, sourceY, sourceWidth, sourceHeight, destWidth, destHeight, options) {\n    var ctx = canvas.getContext('2d');\n\n    if (options.imageSmoothingEnabled === false) {\n      ctx.msImageSmoothingEnabled = false;\n      ctx.imageSmoothingEnabled = false;\n    } else if (options.imageSmoothingQuality) {\n      ctx.imageSmoothingQuality = options.imageSmoothingQuality;\n    }\n\n    ctx.drawImage(img, sourceX, sourceY, sourceWidth, sourceHeight, 0, 0, destWidth, destHeight);\n    return ctx;\n  }; // Determines if the target image should be a canvas element:\n\n\n  loadImage.requiresCanvas = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio;\n  }; // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options:\n\n\n  loadImage.scale = function (img, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {}; // eslint-disable-next-line no-param-reassign\n\n    data = data || {};\n    var useCanvas = img.getContext || loadImage.requiresCanvas(options) && !!loadImage.global.HTMLCanvasElement;\n    var width = img.naturalWidth || img.width;\n    var height = img.naturalHeight || img.height;\n    var destWidth = width;\n    var destHeight = height;\n    var maxWidth;\n    var maxHeight;\n    var minWidth;\n    var minHeight;\n    var sourceWidth;\n    var sourceHeight;\n    var sourceX;\n    var sourceY;\n    var pixelRatio;\n    var downsamplingRatio;\n    var tmp;\n    var canvas;\n    /**\n     * Scales up image dimensions\n     */\n\n    function scaleUp() {\n      var scale = Math.max((minWidth || destWidth) / destWidth, (minHeight || destHeight) / destHeight);\n\n      if (scale > 1) {\n        destWidth *= scale;\n        destHeight *= scale;\n      }\n    }\n    /**\n     * Scales down image dimensions\n     */\n\n\n    function scaleDown() {\n      var scale = Math.min((maxWidth || destWidth) / destWidth, (maxHeight || destHeight) / destHeight);\n\n      if (scale < 1) {\n        destWidth *= scale;\n        destHeight *= scale;\n      }\n    }\n\n    if (useCanvas) {\n      // eslint-disable-next-line no-param-reassign\n      options = loadImage.getTransformedOptions(img, options, data);\n      sourceX = options.left || 0;\n      sourceY = options.top || 0;\n\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth;\n\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right;\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0);\n      }\n\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight;\n\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom;\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0);\n      }\n\n      destWidth = sourceWidth;\n      destHeight = sourceHeight;\n    }\n\n    maxWidth = options.maxWidth;\n    maxHeight = options.maxHeight;\n    minWidth = options.minWidth;\n    minHeight = options.minHeight;\n\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth;\n      destHeight = maxHeight;\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight;\n\n      if (tmp < 0) {\n        sourceHeight = maxHeight * sourceWidth / maxWidth;\n\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2;\n        }\n      } else if (tmp > 0) {\n        sourceWidth = maxWidth * sourceHeight / maxHeight;\n\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2;\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth;\n        minHeight = maxHeight = maxHeight || minHeight;\n      }\n\n      if (options.cover) {\n        scaleDown();\n        scaleUp();\n      } else {\n        scaleUp();\n        scaleDown();\n      }\n    }\n\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio;\n\n      if (pixelRatio > 1 && // Check if the image has not yet had the device pixel ratio applied:\n      !(img.style.width && Math.floor(parseFloat(img.style.width, 10)) === Math.floor(width / pixelRatio))) {\n        destWidth *= pixelRatio;\n        destHeight *= pixelRatio;\n      } // Check if workaround for Chromium orientation crop bug is required:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1074354\n\n\n      if (loadImage.orientationCropBug && !img.getContext && (sourceX || sourceY || sourceWidth !== width || sourceHeight !== height)) {\n        // Write the complete source image to an intermediate canvas first:\n        tmp = img; // eslint-disable-next-line no-param-reassign\n\n        img = loadImage.createCanvas(width, height, true);\n        loadImage.drawImage(tmp, img, 0, 0, width, height, width, height, options);\n      }\n\n      downsamplingRatio = options.downsamplingRatio;\n\n      if (downsamplingRatio > 0 && downsamplingRatio < 1 && destWidth < sourceWidth && destHeight < sourceHeight) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas = loadImage.createCanvas(sourceWidth * downsamplingRatio, sourceHeight * downsamplingRatio, true);\n          loadImage.drawImage(img, canvas, sourceX, sourceY, sourceWidth, sourceHeight, canvas.width, canvas.height, options);\n          sourceX = 0;\n          sourceY = 0;\n          sourceWidth = canvas.width;\n          sourceHeight = canvas.height; // eslint-disable-next-line no-param-reassign\n\n          img = canvas;\n        }\n      }\n\n      canvas = loadImage.createCanvas(destWidth, destHeight);\n      loadImage.transformCoordinates(canvas, options, data);\n\n      if (pixelRatio > 1) {\n        canvas.style.width = canvas.width / pixelRatio + 'px';\n      }\n\n      loadImage.drawImage(img, canvas, sourceX, sourceY, sourceWidth, sourceHeight, destWidth, destHeight, options).setTransform(1, 0, 0, 1, 0, 0); // reset to the identity matrix\n\n      return canvas;\n    }\n\n    img.width = destWidth;\n    img.height = destHeight;\n    return img;\n  };\n});","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/blueimp-load-image/js/load-image-scale.js"],"names":["factory","define","amd","module","exports","require","window","loadImage","originalTransform","transform","createCanvas","width","height","offscreen","global","OffscreenCanvas","canvas","document","createElement","img","options","callback","file","data","call","scale","transformCoordinates","getTransformedOptions","aspectRatio","newOptions","i","Object","prototype","hasOwnProperty","crop","naturalWidth","naturalHeight","maxWidth","maxHeight","drawImage","sourceX","sourceY","sourceWidth","sourceHeight","destWidth","destHeight","ctx","getContext","imageSmoothingEnabled","msImageSmoothingEnabled","imageSmoothingQuality","requiresCanvas","useCanvas","HTMLCanvasElement","minWidth","minHeight","pixelRatio","downsamplingRatio","tmp","scaleUp","Math","max","scaleDown","min","left","top","right","undefined","bottom","contain","cover","style","floor","parseFloat","orientationCropBug","setTransform"],"mappings":"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","sourcesContent":["/*\n * JavaScript Load Image Scaling\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  var originalTransform = loadImage.transform\n\n  loadImage.createCanvas = function (width, height, offscreen) {\n    if (offscreen && loadImage.global.OffscreenCanvas) {\n      return new OffscreenCanvas(width, height)\n    }\n    var canvas = document.createElement('canvas')\n    canvas.width = width\n    canvas.height = height\n    return canvas\n  }\n\n  loadImage.transform = function (img, options, callback, file, data) {\n    originalTransform.call(\n      loadImage,\n      loadImage.scale(img, options, data),\n      options,\n      callback,\n      file,\n      data\n    )\n  }\n\n  // Transform image coordinates, allows to override e.g.\n  // the canvas orientation based on the orientation option,\n  // gets canvas, options and data passed as arguments:\n  loadImage.transformCoordinates = function () {}\n\n  // Returns transformed options, allows to override e.g.\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\n  // gets img, options, data passed as arguments:\n  loadImage.getTransformedOptions = function (img, options) {\n    var aspectRatio = options.aspectRatio\n    var newOptions\n    var i\n    var width\n    var height\n    if (!aspectRatio) {\n      return options\n    }\n    newOptions = {}\n    for (i in options) {\n      if (Object.prototype.hasOwnProperty.call(options, i)) {\n        newOptions[i] = options[i]\n      }\n    }\n    newOptions.crop = true\n    width = img.naturalWidth || img.width\n    height = img.naturalHeight || img.height\n    if (width / height > aspectRatio) {\n      newOptions.maxWidth = height * aspectRatio\n      newOptions.maxHeight = height\n    } else {\n      newOptions.maxWidth = width\n      newOptions.maxHeight = width / aspectRatio\n    }\n    return newOptions\n  }\n\n  // Canvas render method, allows to implement a different rendering algorithm:\n  loadImage.drawImage = function (\n    img,\n    canvas,\n    sourceX,\n    sourceY,\n    sourceWidth,\n    sourceHeight,\n    destWidth,\n    destHeight,\n    options\n  ) {\n    var ctx = canvas.getContext('2d')\n    if (options.imageSmoothingEnabled === false) {\n      ctx.msImageSmoothingEnabled = false\n      ctx.imageSmoothingEnabled = false\n    } else if (options.imageSmoothingQuality) {\n      ctx.imageSmoothingQuality = options.imageSmoothingQuality\n    }\n    ctx.drawImage(\n      img,\n      sourceX,\n      sourceY,\n      sourceWidth,\n      sourceHeight,\n      0,\n      0,\n      destWidth,\n      destHeight\n    )\n    return ctx\n  }\n\n  // Determines if the target image should be a canvas element:\n  loadImage.requiresCanvas = function (options) {\n    return options.canvas || options.crop || !!options.aspectRatio\n  }\n\n  // Scales and/or crops the given image (img or canvas HTML element)\n  // using the given options:\n  loadImage.scale = function (img, options, data) {\n    // eslint-disable-next-line no-param-reassign\n    options = options || {}\n    // eslint-disable-next-line no-param-reassign\n    data = data || {}\n    var useCanvas =\n      img.getContext ||\n      (loadImage.requiresCanvas(options) &&\n        !!loadImage.global.HTMLCanvasElement)\n    var width = img.naturalWidth || img.width\n    var height = img.naturalHeight || img.height\n    var destWidth = width\n    var destHeight = height\n    var maxWidth\n    var maxHeight\n    var minWidth\n    var minHeight\n    var sourceWidth\n    var sourceHeight\n    var sourceX\n    var sourceY\n    var pixelRatio\n    var downsamplingRatio\n    var tmp\n    var canvas\n    /**\n     * Scales up image dimensions\n     */\n    function scaleUp() {\n      var scale = Math.max(\n        (minWidth || destWidth) / destWidth,\n        (minHeight || destHeight) / destHeight\n      )\n      if (scale > 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    /**\n     * Scales down image dimensions\n     */\n    function scaleDown() {\n      var scale = Math.min(\n        (maxWidth || destWidth) / destWidth,\n        (maxHeight || destHeight) / destHeight\n      )\n      if (scale < 1) {\n        destWidth *= scale\n        destHeight *= scale\n      }\n    }\n    if (useCanvas) {\n      // eslint-disable-next-line no-param-reassign\n      options = loadImage.getTransformedOptions(img, options, data)\n      sourceX = options.left || 0\n      sourceY = options.top || 0\n      if (options.sourceWidth) {\n        sourceWidth = options.sourceWidth\n        if (options.right !== undefined && options.left === undefined) {\n          sourceX = width - sourceWidth - options.right\n        }\n      } else {\n        sourceWidth = width - sourceX - (options.right || 0)\n      }\n      if (options.sourceHeight) {\n        sourceHeight = options.sourceHeight\n        if (options.bottom !== undefined && options.top === undefined) {\n          sourceY = height - sourceHeight - options.bottom\n        }\n      } else {\n        sourceHeight = height - sourceY - (options.bottom || 0)\n      }\n      destWidth = sourceWidth\n      destHeight = sourceHeight\n    }\n    maxWidth = options.maxWidth\n    maxHeight = options.maxHeight\n    minWidth = options.minWidth\n    minHeight = options.minHeight\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\n      destWidth = maxWidth\n      destHeight = maxHeight\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight\n      if (tmp < 0) {\n        sourceHeight = (maxHeight * sourceWidth) / maxWidth\n        if (options.top === undefined && options.bottom === undefined) {\n          sourceY = (height - sourceHeight) / 2\n        }\n      } else if (tmp > 0) {\n        sourceWidth = (maxWidth * sourceHeight) / maxHeight\n        if (options.left === undefined && options.right === undefined) {\n          sourceX = (width - sourceWidth) / 2\n        }\n      }\n    } else {\n      if (options.contain || options.cover) {\n        minWidth = maxWidth = maxWidth || minWidth\n        minHeight = maxHeight = maxHeight || minHeight\n      }\n      if (options.cover) {\n        scaleDown()\n        scaleUp()\n      } else {\n        scaleUp()\n        scaleDown()\n      }\n    }\n    if (useCanvas) {\n      pixelRatio = options.pixelRatio\n      if (\n        pixelRatio > 1 &&\n        // Check if the image has not yet had the device pixel ratio applied:\n        !(\n          img.style.width &&\n          Math.floor(parseFloat(img.style.width, 10)) ===\n            Math.floor(width / pixelRatio)\n        )\n      ) {\n        destWidth *= pixelRatio\n        destHeight *= pixelRatio\n      }\n      // Check if workaround for Chromium orientation crop bug is required:\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1074354\n      if (\n        loadImage.orientationCropBug &&\n        !img.getContext &&\n        (sourceX || sourceY || sourceWidth !== width || sourceHeight !== height)\n      ) {\n        // Write the complete source image to an intermediate canvas first:\n        tmp = img\n        // eslint-disable-next-line no-param-reassign\n        img = loadImage.createCanvas(width, height, true)\n        loadImage.drawImage(\n          tmp,\n          img,\n          0,\n          0,\n          width,\n          height,\n          width,\n          height,\n          options\n        )\n      }\n      downsamplingRatio = options.downsamplingRatio\n      if (\n        downsamplingRatio > 0 &&\n        downsamplingRatio < 1 &&\n        destWidth < sourceWidth &&\n        destHeight < sourceHeight\n      ) {\n        while (sourceWidth * downsamplingRatio > destWidth) {\n          canvas = loadImage.createCanvas(\n            sourceWidth * downsamplingRatio,\n            sourceHeight * downsamplingRatio,\n            true\n          )\n          loadImage.drawImage(\n            img,\n            canvas,\n            sourceX,\n            sourceY,\n            sourceWidth,\n            sourceHeight,\n            canvas.width,\n            canvas.height,\n            options\n          )\n          sourceX = 0\n          sourceY = 0\n          sourceWidth = canvas.width\n          sourceHeight = canvas.height\n          // eslint-disable-next-line no-param-reassign\n          img = canvas\n        }\n      }\n      canvas = loadImage.createCanvas(destWidth, destHeight)\n      loadImage.transformCoordinates(canvas, options, data)\n      if (pixelRatio > 1) {\n        canvas.style.width = canvas.width / pixelRatio + 'px'\n      }\n      loadImage\n        .drawImage(\n          img,\n          canvas,\n          sourceX,\n          sourceY,\n          sourceWidth,\n          sourceHeight,\n          destWidth,\n          destHeight,\n          options\n        )\n        .setTransform(1, 0, 0, 1, 0, 0) // reset to the identity matrix\n      return canvas\n    }\n    img.width = destWidth\n    img.height = destHeight\n    return img\n  }\n})\n"]},"metadata":{},"sourceType":"script"}