{"ast":null,"code":"import _objectSpread from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/* eslint-disable eslint-comments/no-unlimited-disable */\n\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { State } from '../State';\nimport PressGestureHandler from './PressGestureHandler';\nimport { isnan, isValidNumber } from './utils';\n\nvar LongPressGestureHandler = /*#__PURE__*/function (_PressGestureHandler) {\n  _inherits(LongPressGestureHandler, _PressGestureHandler);\n\n  var _super = _createSuper(LongPressGestureHandler);\n\n  function LongPressGestureHandler() {\n    _classCallCheck(this, LongPressGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LongPressGestureHandler, [{\n    key: \"minDurationMs\",\n    get: function get() {\n      // @ts-ignore FIXNE(TS)\n      return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\n    }\n  }, {\n    key: \"maxDist\",\n    get: function get() {\n      // @ts-ignore FIXNE(TS)\n      return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_ref) {\n      var maxDistSq = _ref.maxDistSq;\n      return !isValidNumber(maxDistSq);\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this.hasCustomActivationCriteria) {\n        // Default config\n        // If no params have been defined then this config should emulate the native gesture as closely as possible.\n        return {\n          shouldCancelWhenOutside: true,\n          maxDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(LongPressGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        // threshold: this.maxDist,\n        time: this.minDurationMs\n      });\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      return {\n        [Hammer.INPUT_START]: State.ACTIVE,\n        [Hammer.INPUT_MOVE]: State.ACTIVE,\n        [Hammer.INPUT_END]: State.END,\n        [Hammer.INPUT_CANCEL]: State.FAILED\n      }[type];\n    }\n  }]);\n\n  return LongPressGestureHandler;\n}(PressGestureHandler);\n\nexport default LongPressGestureHandler;","map":{"version":3,"sources":["LongPressGestureHandler.ts"],"names":["minDurationMs","isnan","maxDist","updateHasCustomActivationCriteria","maxDistSq","isValidNumber","getConfig","shouldCancelWhenOutside","getHammerConfig","time","getState","Hammer","State","FAILED"],"mappings":";;;;;;;;AAAA;;AACA;AACA,OAAA,MAAA,MAAA,gBAAA;AAEA,SAAA,KAAA,QAAA,UAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,SAAA,KAAA,EAAA,aAAA,QAAA,SAAA;;IAIA,uB;;;;;;;;;;;;;SACMA,eAAwB;AAC1B;AACA,aAAOC,KAAK,CAAC,KAAA,MAAA,CAANA,aAAK,CAALA,GAAAA,GAAAA,GAAyC,KAAA,MAAA,CAAhD,aAAA;AACD;;;SAEGC,eAAU;AACZ;AACA,aAAOD,KAAK,CAAC,KAAA,MAAA,CAANA,OAAK,CAALA,GAAAA,CAAAA,GAAiC,KAAA,MAAA,CAAxC,OAAA;AACD;;;WAEDE,iDAAyD;AAAA,UAArBC,SAAqB,QAArBA,SAAqB;AACvD,aAAO,CAACC,aAAa,CAArB,SAAqB,CAArB;AACD;;;WAEDC,qBAAY;AACV,UAAI,CAAC,KAAL,2BAAA,EAAuC;AACrC;AACA;AACA,eAAO;AACLC,UAAAA,uBAAuB,EADlB,IAAA;AAELH,UAAAA,SAAS,EAAE;AAFN,SAAP;AAID;;AACD,aAAO,KAAP,MAAA;AACD;;;WAEDI,2BAAkB;AAChB;AAEE;AACAC,QAAAA,IAAI,EAAE,KAAKT;AAHb;AAKD;;;WAEDU,kBAAQ,IAARA,EAA8C;AAC5C,aAAO;AACL,SAACC,MAAM,CAAP,WAAA,GAAsBC,KAAK,CADtB,MAAA;AAEL,SAACD,MAAM,CAAP,UAAA,GAAqBC,KAAK,CAFrB,MAAA;AAGL,SAACD,MAAM,CAAP,SAAA,GAAoBC,KAAK,CAHpB,GAAA;AAIL,SAACD,MAAM,CAAP,YAAA,GAAuBC,KAAK,CAACC;AAJxB,QAAP,IAAO,CAAP;AAMD;;;;EA1CH,mB;;AA6CA,eAAA,uBAAA","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { State } from '../State';\nimport PressGestureHandler from './PressGestureHandler';\nimport { isnan, isValidNumber } from './utils';\nimport { Config } from './GestureHandler';\nimport { HammerInputNames } from './constants';\n\nclass LongPressGestureHandler extends PressGestureHandler {\n  get minDurationMs(): number {\n    // @ts-ignore FIXNE(TS)\n    return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    // @ts-ignore FIXNE(TS)\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  updateHasCustomActivationCriteria({ maxDistSq }: Config) {\n    return !isValidNumber(maxDistSq);\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  getState(type: keyof typeof HammerInputNames) {\n    return {\n      [Hammer.INPUT_START]: State.ACTIVE,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.FAILED,\n    }[type];\n  }\n}\n\nexport default LongPressGestureHandler;\n"]},"metadata":{},"sourceType":"module"}