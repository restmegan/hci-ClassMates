{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _momentTimezone = require('moment-timezone');\n\nvar _momentTimezone2 = _interopRequireDefault(_momentTimezone);\n\nvar _func = require('./func');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // loads moment-timezone's timezone data, which comes from the\n// IANA Time Zone Database at https://www.iana.org/time-zones\n\n\n_momentTimezone2.default.tz.load({\n  zones: [],\n  links: [],\n  version: 'latest'\n});\n\nvar guessUserTz = function guessUserTz() {\n  // User-Agent sniffing is not always reliable, but is the recommended technique\n  // for determining whether or not we're on a mobile device according to MDN\n  // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Mobile_Tablet_or_Desktop\n  var isMobile = global.navigator !== undefined ? global.navigator.userAgent.match(/Mobi/) : false;\n  var supportsIntl = global.Intl !== undefined;\n  var userTz = void 0;\n\n  if (isMobile && supportsIntl) {\n    // moment-timezone gives preference to the Intl API regardless of device type,\n    // so unset global.Intl to trick moment-timezone into using its fallback\n    // see https://github.com/moment/moment-timezone/issues/441\n    // TODO: Clean this up when that issue is resolved\n    var globalIntl = global.Intl;\n    global.Intl = undefined;\n    userTz = _momentTimezone2.default.tz.guess();\n    global.Intl = globalIntl;\n  } else {\n    userTz = _momentTimezone2.default.tz.guess();\n  } // return GMT if we're unable to guess or the system is using UTC\n\n\n  if (!userTz || userTz === 'UTC') return getTzForName('Etc/Greenwich');\n\n  try {\n    return getTzForName(userTz);\n  } catch (e) {\n    console.error(e);\n    return getTzForName('Etc/Greenwich');\n  }\n};\n/**\n * Create a time data object using moment.\n * If a time is provided, just format it; if not, use the current time.\n *\n * @function getValidTimeData\n * @param  {string} time          a time; defaults to now\n * @param  {string} meridiem      AM or PM; defaults to AM via moment\n * @param  {Number} timeMode      12 or 24-hour mode\n * @param  {string} tz            a timezone name; defaults to guessing a user's tz or GMT\n * @return {Object}               a key-value representation of time data\n */\n\n\nvar getValidTimeData = function getValidTimeData() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var tz = options.tz,\n      time = options.time,\n      timeMode = options.timeMode,\n      _options$useTz = options.useTz,\n      useTz = _options$useTz === undefined ? true : _options$useTz,\n      _options$meridiem = options.meridiem,\n      meridiem = _options$meridiem === undefined ? null : _options$meridiem;\n  var validMeridiem = getValidMeridiem(meridiem); // when we only have a valid meridiem, that implies a 12h mode\n\n  var mode = validMeridiem && !timeMode ? 12 : timeMode || 24;\n  var timezone = tz || guessUserTz().zoneName;\n  var validMode = getValidateTimeMode(mode);\n  var validTime = getValidTimeString(time, validMeridiem);\n  var format12 = 'hh:mmA';\n  var format24 = 'HH:mmA'; // What format is the hour we provide to moment below in?\n\n  var hourFormat = validMode === 12 ? format12 : format24;\n  var time24 = void 0;\n  var time12 = void 0;\n  var formatTime = (0, _momentTimezone2.default)('1970-01-01 ' + validTime, 'YYYY-MM-DD ' + hourFormat, 'en');\n\n  if (time || !useTz) {\n    time24 = (validTime ? formatTime.format(format24) : (0, _momentTimezone2.default)().format(format24)).split(/:/);\n    time12 = (validTime ? formatTime.format(format12) : (0, _momentTimezone2.default)().format(format12)).split(/:/);\n  } else {\n    time24 = (validTime ? formatTime.tz(timezone).format(format24) : (0, _momentTimezone2.default)().tz(timezone).format(format24)).split(/:/);\n    time12 = (validTime ? formatTime.tz(timezone).format(format12) : (0, _momentTimezone2.default)().tz(timezone).format(format12)).split(/:/);\n  }\n\n  var timeData = {\n    timezone: timezone,\n    mode: validMode,\n    hour24: (0, _func.head)(time24),\n    minute: (0, _func.last)(time24).slice(0, 2),\n    hour12: (0, _func.head)(time12).replace(/^0/, ''),\n    meridiem: validMode === 12 ? (0, _func.last)(time12).slice(2) : null\n  };\n  return timeData;\n};\n/**\n * Format the current time as a string\n * @function getCurrentTime\n * @return {string}\n */\n\n\nvar getCurrentTime = function getCurrentTime() {\n  var time = getValidTimeData();\n  return time.hour24 + ':' + time.minute;\n};\n/**\n * Get an integer representation of a time.\n * @function getValidateIntTime\n * @param  {string} time\n * @return {Number}\n */\n\n\nvar getValidateIntTime = function getValidateIntTime(time) {\n  if (isNaN(parseInt(time, 10))) {\n    return 0;\n  }\n\n  return parseInt(time, 10);\n};\n/**\n * Validate, set a default for, and stringify time data.\n * @function getValidateTime\n * @param {string}\n * @return {string}\n */\n\n\nvar getValidateTime = function getValidateTime(time) {\n  var result = time;\n\n  if (_func.is.undefined(result)) {\n    result = '00';\n  }\n\n  if (isNaN(parseInt(result, 10))) {\n    result = '00';\n  }\n\n  if (parseInt(result, 10) < 10) {\n    result = '0' + parseInt(result, 10);\n  }\n\n  return '' + result;\n};\n/**\n * Given a time and meridiem, produce a time string to pass to moment\n * @function getValidTimeString\n * @param  {string} time\n * @param  {string} meridiem\n * @return {string}\n */\n\n\nvar getValidTimeString = function getValidTimeString(time, meridiem) {\n  if (_func.is.string(time)) {\n    var validTime = time && time.indexOf(':').length >= 0 ? time.split(/:/).map(function (t) {\n      return getValidateTime(t);\n    }).join(':') : time;\n    var hourAsInt = parseInt((0, _func.head)(validTime.split(/:/)), 10);\n    var is12hTime = hourAsInt > 0 && hourAsInt <= 12;\n    validTime = validTime && meridiem && is12hTime ? validTime + ' ' + meridiem : validTime;\n    return validTime;\n  }\n\n  return time;\n};\n/**\n * Given a meridiem, try to ensure that it's formatted for use with moment\n * @function getValidMeridiem\n * @param  {string} meridiem\n * @return {string}\n */\n\n\nvar getValidMeridiem = function getValidMeridiem(meridiem) {\n  if (_func.is.string(meridiem)) {\n    return meridiem && meridiem.match(/am|pm/i) ? meridiem.toLowerCase() : null;\n  }\n\n  return meridiem;\n};\n/**\n * Ensure that a meridiem passed as a prop has a valid value\n * @function getValidateMeridiem\n * @param  {string} time\n * @param  {string|Number} timeMode\n * @return {string|null}\n */\n\n\nvar getValidateMeridiem = function getValidateMeridiem(time, timeMode) {\n  var validateTime = time || getCurrentTime();\n  var mode = parseInt(timeMode, 10); // eslint-disable-next-line no-unused-vars\n\n  var hour = validateTime.split(/:/)[0];\n  hour = getValidateIntTime(hour);\n  if (mode === 12) return hour > 12 ? 'PM' : 'AM';\n  return null;\n};\n/**\n * Validate and set a sensible default for time modes.\n *\n * @function getValidateTimeMode\n * @param  {string|Number} timeMode\n * @return {Number}\n */\n\n\nvar getValidateTimeMode = function getValidateTimeMode(timeMode) {\n  var mode = parseInt(timeMode, 10);\n\n  if (isNaN(mode)) {\n    return 24;\n  }\n\n  if (mode !== 24 && mode !== 12) {\n    return 24;\n  }\n\n  return mode;\n};\n\nvar tzNames = function () {\n  //  We want to subset the existing timezone data as much as possible, both for efficiency\n  //  and to avoid confusing the user. Here, we focus on removing reduntant timezone names\n  //  and timezone names for timezones we don't necessarily care about, like Antarctica, and\n  //  special timezone names that exist for convenience.\n  var scrubbedPrefixes = ['Antarctica', 'Arctic', 'Chile'];\n  var scrubbedSuffixes = ['ACT', 'East', 'Knox_IN', 'LHI', 'North', 'NSW', 'South', 'West'];\n\n  var tznames = _momentTimezone2.default.tz.names().filter(function (name) {\n    return name.indexOf('/') >= 0;\n  }).filter(function (name) {\n    return !scrubbedPrefixes.indexOf(name.split('/')[0]) >= 0;\n  }).filter(function (name) {\n    return !scrubbedSuffixes.indexOf(name.split('/').slice(-1)[0]) >= 0;\n  });\n\n  return tznames;\n}(); // We need a human-friendly city name for each timezone identifier\n// counting Canada/*, Mexico/*, and US/* allows users to search for\n// things like 'Eastern' or 'Mountain' and get matches back\n\n\nvar tzCities = tzNames.map(function (name) {\n  return ['Canada', 'Mexico', 'US'].indexOf(name.split('/')[0]) >= 0 ? name : name.split('/').slice(-1)[0];\n}).map(function (name) {\n  return name.replace(/_/g, ' ');\n}); // Provide a mapping between a human-friendly city name and its corresponding\n// timezone identifier and timezone abbreviation as a named export.\n// We can fuzzy match on any of these.\n\nvar tzMaps = tzCities.map(function (city) {\n  var tzMap = {};\n  var tzName = tzNames[tzCities.indexOf(city)];\n  tzMap.city = city;\n  tzMap.zoneName = tzName;\n  tzMap.zoneAbbr = (0, _momentTimezone2.default)().tz(tzName).zoneAbbr();\n  return tzMap;\n});\n\nvar getTzForCity = function getTzForCity(city) {\n  var val = city.toLowerCase();\n  var maps = tzMaps.filter(function (tzMap) {\n    return tzMap.city.toLowerCase() === val;\n  });\n  return (0, _func.head)(maps);\n};\n\nvar getTzCountryAndCity = function getTzCountryAndCity(name) {\n  var sections = name.split('/');\n  return {\n    country: sections[0].toLowerCase(),\n    city: sections.slice(-1)[0].toLowerCase()\n  };\n};\n\nvar _matchTzByName = function _matchTzByName(target, name) {\n  var v1 = getTzCountryAndCity(target);\n  var v2 = getTzCountryAndCity(name);\n  return v1.country === v2.country && v1.city === v2.city;\n};\n\nvar getTzForName = function getTzForName(name) {\n  var maps = tzMaps.filter(function (tzMap) {\n    return tzMap.zoneName === name;\n  });\n\n  if (!maps.length && /\\//.test(name)) {\n    maps = tzMaps.filter(function (tzMap) {\n      return tzMap.zoneAbbr === name;\n    });\n  }\n\n  if (!maps.length) {\n    maps = tzMaps.filter(function (tzMap) {\n      return _matchTzByName(tzMap.zoneName, name);\n    });\n  }\n\n  if (!maps.length) {\n    throw new Error('Can not find target timezone for ' + name);\n  }\n\n  return (0, _func.head)(maps);\n};\n\nvar hourFormatter = function hourFormatter(hour) {\n  var defaultTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '00:00';\n  if (!hour) return defaultTime;\n\n  var _$split = ('' + hour).split(/[:|\\s]/),\n      _$split2 = _slicedToArray(_$split, 3),\n      h = _$split2[0],\n      m = _$split2[1],\n      meridiem = _$split2[2];\n\n  if (meridiem && meridiem.toLowerCase() === 'pm') meridiem = 'PM';\n  if (meridiem && meridiem.toLowerCase() === 'am') meridiem = 'AM';\n  if (meridiem && meridiem !== 'AM' && meridiem !== 'PM') meridiem = 'AM';\n  if (!h || isNaN(h)) h = '0';\n  if (!meridiem && Number(h > 24)) h = Number(h) - 24;\n  if (meridiem && Number(h > 12)) h = Number(h) - 12;\n  if (!m || isNaN(m) || Number(m) >= 60) m = '0';\n  if (Number(h) < 10) h = '0' + Number(h);\n  if (Number(m) < 10) m = '0' + Number(m);\n  return meridiem ? h + ':' + m + ' ' + meridiem : h + ':' + m;\n};\n\nvar withoutMeridiem = function withoutMeridiem(hour) {\n  return hour.replace(/\\s[P|A]M$/, '');\n};\n\nvar getStartAndEnd = function getStartAndEnd(from, to) {\n  var current = (0, _momentTimezone2.default)();\n  var date = current.format('YYYY-MM-DD');\n  var nextDate = current.add(1, 'day').format('YYYY-MM-DD');\n  var f = hourFormatter(from, '00:00');\n  var t = hourFormatter(to, '23:30');\n  var start = date + ' ' + withoutMeridiem(f);\n  var endTmp = withoutMeridiem(t);\n  var end = (0, _momentTimezone2.default)(date + ' ' + endTmp) <= (0, _momentTimezone2.default)(start) ? nextDate + ' ' + endTmp : date + ' ' + endTmp;\n  if (/PM$/.test(f)) start = (0, _momentTimezone2.default)(start).add(12, 'hours').format('YYYY-MM-DD HH:mm');\n  if (/PM$/.test(t)) end = (0, _momentTimezone2.default)(end).add(12, 'hours').format('YYYY-MM-DD HH:mm');\n  return {\n    start: start,\n    end: end\n  };\n};\n\nvar get12ModeTimes = function get12ModeTimes(_ref) {\n  var from = _ref.from,\n      to = _ref.to,\n      _ref$step = _ref.step,\n      step = _ref$step === undefined ? 30 : _ref$step,\n      _ref$unit = _ref.unit,\n      unit = _ref$unit === undefined ? 'minutes' : _ref$unit;\n\n  var _getStartAndEnd = getStartAndEnd(from, to),\n      start = _getStartAndEnd.start,\n      end = _getStartAndEnd.end;\n\n  var times = [];\n  var time = (0, _momentTimezone2.default)(start);\n\n  while (time <= (0, _momentTimezone2.default)(end)) {\n    var hour = Number(time.format('HH'));\n    times.push(time.format('hh:mm') + ' ' + (hour >= 12 ? 'PM' : 'AM'));\n    time = time.add(step, unit);\n  }\n\n  return times;\n};\n\nvar get24ModeTimes = function get24ModeTimes(_ref2) {\n  var from = _ref2.from,\n      to = _ref2.to,\n      _ref2$step = _ref2.step,\n      step = _ref2$step === undefined ? 30 : _ref2$step,\n      _ref2$unit = _ref2.unit,\n      unit = _ref2$unit === undefined ? 'minutes' : _ref2$unit;\n\n  var _getStartAndEnd2 = getStartAndEnd(from, to),\n      start = _getStartAndEnd2.start,\n      end = _getStartAndEnd2.end;\n\n  var times = [];\n  var time = (0, _momentTimezone2.default)(start);\n\n  while (time <= (0, _momentTimezone2.default)(end)) {\n    times.push(time.format('HH:mm'));\n    time = time.add(step, unit);\n  }\n\n  return times;\n};\n\nexports.default = {\n  tzMaps: tzMaps,\n  guessUserTz: guessUserTz,\n  hourFormatter: hourFormatter,\n  getStartAndEnd: getStartAndEnd,\n  get12ModeTimes: get12ModeTimes,\n  get24ModeTimes: get24ModeTimes,\n  withoutMeridiem: withoutMeridiem,\n  time: getValidTimeData,\n  current: getCurrentTime,\n  tzForCity: getTzForCity,\n  tzForName: getTzForName,\n  validate: getValidateTime,\n  validateInt: getValidateIntTime,\n  validateMeridiem: getValidateMeridiem,\n  validateTimeMode: getValidateTimeMode\n};","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/react-times/lib/utils/time.js"],"names":["Object","defineProperty","exports","value","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","TypeError","_momentTimezone","require","_momentTimezone2","_interopRequireDefault","_func","obj","__esModule","default","tz","load","zones","links","version","guessUserTz","isMobile","global","navigator","userAgent","match","supportsIntl","Intl","userTz","globalIntl","guess","getTzForName","e","console","error","getValidTimeData","options","arguments","time","timeMode","_options$useTz","useTz","_options$meridiem","meridiem","validMeridiem","getValidMeridiem","mode","timezone","zoneName","validMode","getValidateTimeMode","validTime","getValidTimeString","format12","format24","hourFormat","time24","time12","formatTime","format","split","timeData","hour24","head","minute","last","slice","hour12","replace","getCurrentTime","getValidateIntTime","isNaN","parseInt","getValidateTime","result","is","string","indexOf","map","t","join","hourAsInt","is12hTime","toLowerCase","getValidateMeridiem","validateTime","hour","tzNames","scrubbedPrefixes","scrubbedSuffixes","tznames","names","filter","name","tzCities","tzMaps","city","tzMap","tzName","zoneAbbr","getTzForCity","val","maps","getTzCountryAndCity","sections","country","_matchTzByName","target","v1","v2","test","Error","hourFormatter","defaultTime","_$split","_$split2","h","m","Number","withoutMeridiem","getStartAndEnd","from","to","current","date","nextDate","add","f","start","endTmp","end","get12ModeTimes","_ref","_ref$step","step","_ref$unit","unit","_getStartAndEnd","times","get24ModeTimes","_ref2","_ref2$step","_ref2$unit","_getStartAndEnd2","tzForCity","tzForName","validate","validateInt","validateMeridiem","validateTimeMode"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _momentTimezone = require('moment-timezone');\n\nvar _momentTimezone2 = _interopRequireDefault(_momentTimezone);\n\nvar _func = require('./func');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// loads moment-timezone's timezone data, which comes from the\n// IANA Time Zone Database at https://www.iana.org/time-zones\n_momentTimezone2.default.tz.load({\n  zones: [],\n  links: [],\n  version: 'latest'\n});\n\nvar guessUserTz = function guessUserTz() {\n  // User-Agent sniffing is not always reliable, but is the recommended technique\n  // for determining whether or not we're on a mobile device according to MDN\n  // see https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent#Mobile_Tablet_or_Desktop\n  var isMobile = global.navigator !== undefined ? global.navigator.userAgent.match(/Mobi/) : false;\n\n  var supportsIntl = global.Intl !== undefined;\n\n  var userTz = void 0;\n\n  if (isMobile && supportsIntl) {\n    // moment-timezone gives preference to the Intl API regardless of device type,\n    // so unset global.Intl to trick moment-timezone into using its fallback\n    // see https://github.com/moment/moment-timezone/issues/441\n    // TODO: Clean this up when that issue is resolved\n    var globalIntl = global.Intl;\n    global.Intl = undefined;\n    userTz = _momentTimezone2.default.tz.guess();\n    global.Intl = globalIntl;\n  } else {\n    userTz = _momentTimezone2.default.tz.guess();\n  }\n\n  // return GMT if we're unable to guess or the system is using UTC\n  if (!userTz || userTz === 'UTC') return getTzForName('Etc/Greenwich');\n\n  try {\n    return getTzForName(userTz);\n  } catch (e) {\n    console.error(e);\n    return getTzForName('Etc/Greenwich');\n  }\n};\n\n/**\n * Create a time data object using moment.\n * If a time is provided, just format it; if not, use the current time.\n *\n * @function getValidTimeData\n * @param  {string} time          a time; defaults to now\n * @param  {string} meridiem      AM or PM; defaults to AM via moment\n * @param  {Number} timeMode      12 or 24-hour mode\n * @param  {string} tz            a timezone name; defaults to guessing a user's tz or GMT\n * @return {Object}               a key-value representation of time data\n */\nvar getValidTimeData = function getValidTimeData() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var tz = options.tz,\n      time = options.time,\n      timeMode = options.timeMode,\n      _options$useTz = options.useTz,\n      useTz = _options$useTz === undefined ? true : _options$useTz,\n      _options$meridiem = options.meridiem,\n      meridiem = _options$meridiem === undefined ? null : _options$meridiem;\n\n  var validMeridiem = getValidMeridiem(meridiem);\n\n  // when we only have a valid meridiem, that implies a 12h mode\n  var mode = validMeridiem && !timeMode ? 12 : timeMode || 24;\n  var timezone = tz || guessUserTz().zoneName;\n\n  var validMode = getValidateTimeMode(mode);\n  var validTime = getValidTimeString(time, validMeridiem);\n  var format12 = 'hh:mmA';\n  var format24 = 'HH:mmA';\n\n  // What format is the hour we provide to moment below in?\n  var hourFormat = validMode === 12 ? format12 : format24;\n\n  var time24 = void 0;\n  var time12 = void 0;\n  var formatTime = (0, _momentTimezone2.default)('1970-01-01 ' + validTime, 'YYYY-MM-DD ' + hourFormat, 'en');\n  if (time || !useTz) {\n    time24 = (validTime ? formatTime.format(format24) : (0, _momentTimezone2.default)().format(format24)).split(/:/);\n    time12 = (validTime ? formatTime.format(format12) : (0, _momentTimezone2.default)().format(format12)).split(/:/);\n  } else {\n    time24 = (validTime ? formatTime.tz(timezone).format(format24) : (0, _momentTimezone2.default)().tz(timezone).format(format24)).split(/:/);\n\n    time12 = (validTime ? formatTime.tz(timezone).format(format12) : (0, _momentTimezone2.default)().tz(timezone).format(format12)).split(/:/);\n  }\n\n  var timeData = {\n    timezone: timezone,\n    mode: validMode,\n    hour24: (0, _func.head)(time24),\n    minute: (0, _func.last)(time24).slice(0, 2),\n    hour12: (0, _func.head)(time12).replace(/^0/, ''),\n    meridiem: validMode === 12 ? (0, _func.last)(time12).slice(2) : null\n  };\n\n  return timeData;\n};\n\n/**\n * Format the current time as a string\n * @function getCurrentTime\n * @return {string}\n */\nvar getCurrentTime = function getCurrentTime() {\n  var time = getValidTimeData();\n  return time.hour24 + ':' + time.minute;\n};\n\n/**\n * Get an integer representation of a time.\n * @function getValidateIntTime\n * @param  {string} time\n * @return {Number}\n */\nvar getValidateIntTime = function getValidateIntTime(time) {\n  if (isNaN(parseInt(time, 10))) {\n    return 0;\n  }\n  return parseInt(time, 10);\n};\n\n/**\n * Validate, set a default for, and stringify time data.\n * @function getValidateTime\n * @param {string}\n * @return {string}\n */\nvar getValidateTime = function getValidateTime(time) {\n  var result = time;\n  if (_func.is.undefined(result)) {\n    result = '00';\n  }\n  if (isNaN(parseInt(result, 10))) {\n    result = '00';\n  }\n  if (parseInt(result, 10) < 10) {\n    result = '0' + parseInt(result, 10);\n  }\n  return '' + result;\n};\n\n/**\n * Given a time and meridiem, produce a time string to pass to moment\n * @function getValidTimeString\n * @param  {string} time\n * @param  {string} meridiem\n * @return {string}\n */\nvar getValidTimeString = function getValidTimeString(time, meridiem) {\n  if (_func.is.string(time)) {\n    var validTime = time && time.indexOf(':').length >= 0 ? time.split(/:/).map(function (t) {\n      return getValidateTime(t);\n    }).join(':') : time;\n    var hourAsInt = parseInt((0, _func.head)(validTime.split(/:/)), 10);\n    var is12hTime = hourAsInt > 0 && hourAsInt <= 12;\n\n    validTime = validTime && meridiem && is12hTime ? validTime + ' ' + meridiem : validTime;\n\n    return validTime;\n  }\n\n  return time;\n};\n\n/**\n * Given a meridiem, try to ensure that it's formatted for use with moment\n * @function getValidMeridiem\n * @param  {string} meridiem\n * @return {string}\n */\nvar getValidMeridiem = function getValidMeridiem(meridiem) {\n  if (_func.is.string(meridiem)) {\n    return meridiem && meridiem.match(/am|pm/i) ? meridiem.toLowerCase() : null;\n  }\n\n  return meridiem;\n};\n\n/**\n * Ensure that a meridiem passed as a prop has a valid value\n * @function getValidateMeridiem\n * @param  {string} time\n * @param  {string|Number} timeMode\n * @return {string|null}\n */\nvar getValidateMeridiem = function getValidateMeridiem(time, timeMode) {\n  var validateTime = time || getCurrentTime();\n  var mode = parseInt(timeMode, 10);\n  // eslint-disable-next-line no-unused-vars\n  var hour = validateTime.split(/:/)[0];\n  hour = getValidateIntTime(hour);\n\n  if (mode === 12) return hour > 12 ? 'PM' : 'AM';\n\n  return null;\n};\n\n/**\n * Validate and set a sensible default for time modes.\n *\n * @function getValidateTimeMode\n * @param  {string|Number} timeMode\n * @return {Number}\n */\nvar getValidateTimeMode = function getValidateTimeMode(timeMode) {\n  var mode = parseInt(timeMode, 10);\n\n  if (isNaN(mode)) {\n    return 24;\n  }\n  if (mode !== 24 && mode !== 12) {\n    return 24;\n  }\n\n  return mode;\n};\n\nvar tzNames = function () {\n  //  We want to subset the existing timezone data as much as possible, both for efficiency\n  //  and to avoid confusing the user. Here, we focus on removing reduntant timezone names\n  //  and timezone names for timezones we don't necessarily care about, like Antarctica, and\n  //  special timezone names that exist for convenience.\n  var scrubbedPrefixes = ['Antarctica', 'Arctic', 'Chile'];\n  var scrubbedSuffixes = ['ACT', 'East', 'Knox_IN', 'LHI', 'North', 'NSW', 'South', 'West'];\n\n  var tznames = _momentTimezone2.default.tz.names().filter(function (name) {\n    return name.indexOf('/') >= 0;\n  }).filter(function (name) {\n    return !scrubbedPrefixes.indexOf(name.split('/')[0]) >= 0;\n  }).filter(function (name) {\n    return !scrubbedSuffixes.indexOf(name.split('/').slice(-1)[0]) >= 0;\n  });\n\n  return tznames;\n}();\n\n// We need a human-friendly city name for each timezone identifier\n// counting Canada/*, Mexico/*, and US/* allows users to search for\n// things like 'Eastern' or 'Mountain' and get matches back\nvar tzCities = tzNames.map(function (name) {\n  return ['Canada', 'Mexico', 'US'].indexOf(name.split('/')[0]) >= 0 ? name : name.split('/').slice(-1)[0];\n}).map(function (name) {\n  return name.replace(/_/g, ' ');\n});\n\n// Provide a mapping between a human-friendly city name and its corresponding\n// timezone identifier and timezone abbreviation as a named export.\n// We can fuzzy match on any of these.\nvar tzMaps = tzCities.map(function (city) {\n  var tzMap = {};\n  var tzName = tzNames[tzCities.indexOf(city)];\n\n  tzMap.city = city;\n  tzMap.zoneName = tzName;\n  tzMap.zoneAbbr = (0, _momentTimezone2.default)().tz(tzName).zoneAbbr();\n\n  return tzMap;\n});\n\nvar getTzForCity = function getTzForCity(city) {\n  var val = city.toLowerCase();\n  var maps = tzMaps.filter(function (tzMap) {\n    return tzMap.city.toLowerCase() === val;\n  });\n  return (0, _func.head)(maps);\n};\n\nvar getTzCountryAndCity = function getTzCountryAndCity(name) {\n  var sections = name.split('/');\n  return {\n    country: sections[0].toLowerCase(),\n    city: sections.slice(-1)[0].toLowerCase()\n  };\n};\n\nvar _matchTzByName = function _matchTzByName(target, name) {\n  var v1 = getTzCountryAndCity(target);\n  var v2 = getTzCountryAndCity(name);\n\n  return v1.country === v2.country && v1.city === v2.city;\n};\n\nvar getTzForName = function getTzForName(name) {\n  var maps = tzMaps.filter(function (tzMap) {\n    return tzMap.zoneName === name;\n  });\n  if (!maps.length && /\\//.test(name)) {\n    maps = tzMaps.filter(function (tzMap) {\n      return tzMap.zoneAbbr === name;\n    });\n  }\n  if (!maps.length) {\n    maps = tzMaps.filter(function (tzMap) {\n      return _matchTzByName(tzMap.zoneName, name);\n    });\n  }\n  if (!maps.length) {\n    throw new Error('Can not find target timezone for ' + name);\n  }\n  return (0, _func.head)(maps);\n};\n\nvar hourFormatter = function hourFormatter(hour) {\n  var defaultTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '00:00';\n\n  if (!hour) return defaultTime;\n\n  var _$split = ('' + hour).split(/[:|\\s]/),\n      _$split2 = _slicedToArray(_$split, 3),\n      h = _$split2[0],\n      m = _$split2[1],\n      meridiem = _$split2[2];\n\n  if (meridiem && meridiem.toLowerCase() === 'pm') meridiem = 'PM';\n  if (meridiem && meridiem.toLowerCase() === 'am') meridiem = 'AM';\n  if (meridiem && meridiem !== 'AM' && meridiem !== 'PM') meridiem = 'AM';\n\n  if (!h || isNaN(h)) h = '0';\n  if (!meridiem && Number(h > 24)) h = Number(h) - 24;\n  if (meridiem && Number(h > 12)) h = Number(h) - 12;\n  if (!m || isNaN(m) || Number(m) >= 60) m = '0';\n\n  if (Number(h) < 10) h = '0' + Number(h);\n  if (Number(m) < 10) m = '0' + Number(m);\n\n  return meridiem ? h + ':' + m + ' ' + meridiem : h + ':' + m;\n};\n\nvar withoutMeridiem = function withoutMeridiem(hour) {\n  return hour.replace(/\\s[P|A]M$/, '');\n};\n\nvar getStartAndEnd = function getStartAndEnd(from, to) {\n  var current = (0, _momentTimezone2.default)();\n  var date = current.format('YYYY-MM-DD');\n  var nextDate = current.add(1, 'day').format('YYYY-MM-DD');\n\n  var f = hourFormatter(from, '00:00');\n  var t = hourFormatter(to, '23:30');\n\n  var start = date + ' ' + withoutMeridiem(f);\n  var endTmp = withoutMeridiem(t);\n  var end = (0, _momentTimezone2.default)(date + ' ' + endTmp) <= (0, _momentTimezone2.default)(start) ? nextDate + ' ' + endTmp : date + ' ' + endTmp;\n\n  if (/PM$/.test(f)) start = (0, _momentTimezone2.default)(start).add(12, 'hours').format('YYYY-MM-DD HH:mm');\n  if (/PM$/.test(t)) end = (0, _momentTimezone2.default)(end).add(12, 'hours').format('YYYY-MM-DD HH:mm');\n\n  return {\n    start: start,\n    end: end\n  };\n};\n\nvar get12ModeTimes = function get12ModeTimes(_ref) {\n  var from = _ref.from,\n      to = _ref.to,\n      _ref$step = _ref.step,\n      step = _ref$step === undefined ? 30 : _ref$step,\n      _ref$unit = _ref.unit,\n      unit = _ref$unit === undefined ? 'minutes' : _ref$unit;\n\n  var _getStartAndEnd = getStartAndEnd(from, to),\n      start = _getStartAndEnd.start,\n      end = _getStartAndEnd.end;\n\n  var times = [];\n  var time = (0, _momentTimezone2.default)(start);\n  while (time <= (0, _momentTimezone2.default)(end)) {\n    var hour = Number(time.format('HH'));\n    times.push(time.format('hh:mm') + ' ' + (hour >= 12 ? 'PM' : 'AM'));\n    time = time.add(step, unit);\n  }\n  return times;\n};\n\nvar get24ModeTimes = function get24ModeTimes(_ref2) {\n  var from = _ref2.from,\n      to = _ref2.to,\n      _ref2$step = _ref2.step,\n      step = _ref2$step === undefined ? 30 : _ref2$step,\n      _ref2$unit = _ref2.unit,\n      unit = _ref2$unit === undefined ? 'minutes' : _ref2$unit;\n\n  var _getStartAndEnd2 = getStartAndEnd(from, to),\n      start = _getStartAndEnd2.start,\n      end = _getStartAndEnd2.end;\n\n  var times = [];\n  var time = (0, _momentTimezone2.default)(start);\n  while (time <= (0, _momentTimezone2.default)(end)) {\n    times.push(time.format('HH:mm'));\n    time = time.add(step, unit);\n  }\n  return times;\n};\n\nexports.default = {\n  tzMaps: tzMaps,\n  guessUserTz: guessUserTz,\n  hourFormatter: hourFormatter,\n  getStartAndEnd: getStartAndEnd,\n  get12ModeTimes: get12ModeTimes,\n  get24ModeTimes: get24ModeTimes,\n  withoutMeridiem: withoutMeridiem,\n  time: getValidTimeData,\n  current: getCurrentTime,\n  tzForCity: getTzForCity,\n  tzForName: getTzForName,\n  validate: getValidateTime,\n  validateInt: getValidateIntTime,\n  validateMeridiem: getValidateMeridiem,\n  validateTimeMode: getValidateTimeMode\n};"]},"metadata":{},"sourceType":"script"}