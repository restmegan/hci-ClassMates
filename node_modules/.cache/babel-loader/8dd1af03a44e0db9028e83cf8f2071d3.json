{"ast":null,"code":"/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n/* eslint-disable no-console */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n  /**\n   * Exif tag map\n   *\n   * @name ExifMap\n   * @class\n   * @param {number|string} tagCode IFD tag code\n   */\n\n  function ExifMap(tagCode) {\n    if (tagCode) {\n      Object.defineProperty(this, 'map', {\n        value: this.ifds[tagCode].map\n      });\n      Object.defineProperty(this, 'tags', {\n        value: this.tags && this.tags[tagCode] || {}\n      });\n    }\n  }\n\n  ExifMap.prototype.map = {\n    Orientation: 0x0112,\n    Thumbnail: 'ifd1',\n    Blob: 0x0201,\n    // Alias for JPEGInterchangeFormat\n    Exif: 0x8769,\n    GPSInfo: 0x8825,\n    Interoperability: 0xa005\n  };\n  ExifMap.prototype.ifds = {\n    ifd1: {\n      name: 'Thumbnail',\n      map: ExifMap.prototype.map\n    },\n    0x8769: {\n      name: 'Exif',\n      map: {}\n    },\n    0x8825: {\n      name: 'GPSInfo',\n      map: {}\n    },\n    0xa005: {\n      name: 'Interoperability',\n      map: {}\n    }\n  };\n  /**\n   * Retrieves exif tag value\n   *\n   * @param {number|string} id Exif tag code or name\n   * @returns {object} Exif tag value\n   */\n\n  ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]];\n  };\n  /**\n   * Returns the Exif Thumbnail data as Blob.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Thumbnail data offset\n   * @param {number} length Thumbnail data length\n   * @returns {undefined|Blob} Returns the Thumbnail Blob or undefined\n   */\n\n\n  function getExifThumbnail(dataView, offset, length) {\n    if (!length) return;\n\n    if (offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.');\n      return;\n    }\n\n    return new Blob([loadImage.bufferSlice.call(dataView.buffer, offset, offset + length)], {\n      type: 'image/jpeg'\n    });\n  }\n\n  var ExifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function getValue(dataView, dataOffset) {\n        return dataView.getUint8(dataOffset);\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function getValue(dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset));\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function getValue(dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian);\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function getValue(dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian);\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function getValue(dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian) / dataView.getUint32(dataOffset + 4, littleEndian);\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function getValue(dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian);\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function getValue(dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian) / dataView.getInt32(dataOffset + 4, littleEndian);\n      },\n      size: 8\n    }\n  }; // undefined, 8-bit byte, value depending on field:\n\n  ExifTagTypes[7] = ExifTagTypes[1];\n  /**\n   * Returns Exif tag value.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} offset Tag offset\n   * @param {number} type Tag type\n   * @param {number} length Tag length\n   * @param {boolean} littleEndian Little endian encoding\n   * @returns {object} Tag value\n   */\n\n  function getExifValue(dataView, tiffOffset, offset, type, length, littleEndian) {\n    var tagType = ExifTagTypes[type];\n    var tagSize;\n    var dataOffset;\n    var values;\n    var i;\n    var str;\n    var c;\n\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.');\n      return;\n    }\n\n    tagSize = tagType.size * length; // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n\n    dataOffset = tagSize > 4 ? tiffOffset + dataView.getUint32(offset + 8, littleEndian) : offset + 8;\n\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.');\n      return;\n    }\n\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian);\n    }\n\n    values = [];\n\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(dataView, dataOffset + i * tagType.size, littleEndian);\n    }\n\n    if (tagType.ascii) {\n      str = ''; // Concatenate the chars:\n\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i]; // Ignore the terminating NULL byte(s):\n\n        if (c === \"\\0\") {\n          break;\n        }\n\n        str += c;\n      }\n\n      return str;\n    }\n\n    return values;\n  }\n  /**\n   * Determines if the given tag should be included.\n   *\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   * @param {number|string} tagCode Tag code to check\n   * @returns {boolean} True if the tag should be included\n   */\n\n\n  function shouldIncludeTag(includeTags, excludeTags, tagCode) {\n    return (!includeTags || includeTags[tagCode]) && (!excludeTags || excludeTags[tagCode] !== true);\n  }\n  /**\n   * Parses Exif tags.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} dirOffset Directory offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {ExifMap} tags Map to store parsed exif tags\n   * @param {ExifMap} tagOffsets Map to store parsed exif tag offsets\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   * @returns {number} Next directory offset\n   */\n\n\n  function parseExifTags(dataView, tiffOffset, dirOffset, littleEndian, tags, tagOffsets, includeTags, excludeTags) {\n    var tagsNumber, dirEndOffset, i, tagOffset, tagNumber, tagValue;\n\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.');\n      return;\n    }\n\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian);\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber;\n\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.');\n      return;\n    }\n\n    for (i = 0; i < tagsNumber; i += 1) {\n      tagOffset = dirOffset + 2 + 12 * i;\n      tagNumber = dataView.getUint16(tagOffset, littleEndian);\n      if (!shouldIncludeTag(includeTags, excludeTags, tagNumber)) continue;\n      tagValue = getExifValue(dataView, tiffOffset, tagOffset, dataView.getUint16(tagOffset + 2, littleEndian), // tag type\n      dataView.getUint32(tagOffset + 4, littleEndian), // tag length\n      littleEndian);\n      tags[tagNumber] = tagValue;\n\n      if (tagOffsets) {\n        tagOffsets[tagNumber] = tagOffset;\n      }\n    } // Return the offset to the next directory:\n\n\n    return dataView.getUint32(dirEndOffset, littleEndian);\n  }\n  /**\n   * Parses tags in a given IFD (Image File Directory).\n   *\n   * @param {object} data Data object to store exif tags and offsets\n   * @param {number|string} tagCode IFD tag code\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   */\n\n\n  function parseExifIFD(data, tagCode, dataView, tiffOffset, littleEndian, includeTags, excludeTags) {\n    var dirOffset = data.exif[tagCode];\n\n    if (dirOffset) {\n      data.exif[tagCode] = new ExifMap(tagCode);\n\n      if (data.exifOffsets) {\n        data.exifOffsets[tagCode] = new ExifMap(tagCode);\n      }\n\n      parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data.exif[tagCode], data.exifOffsets && data.exifOffsets[tagCode], includeTags && includeTags[tagCode], excludeTags && excludeTags[tagCode]);\n    }\n  }\n\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return;\n    }\n\n    var includeTags = options.includeExifTags;\n    var excludeTags = options.excludeExifTags || {\n      0x8769: {\n        // ExifIFDPointer\n        0x927c: true // MakerNote\n\n      }\n    };\n    var tiffOffset = offset + 10;\n    var littleEndian;\n    var dirOffset;\n    var thumbnailIFD; // Check for the ASCII code for \"Exif\" (0x45786966):\n\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return;\n    }\n\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.');\n      return;\n    } // Check for the two null bytes:\n\n\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.');\n      return;\n    } // Check the byte alignment:\n\n\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true;\n        break;\n\n      case 0x4d4d:\n        littleEndian = false;\n        break;\n\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.');\n        return;\n    } // Check for the TIFF tag marker (0x002A):\n\n\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {\n      console.log('Invalid Exif data: Missing TIFF marker.');\n      return;\n    } // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n\n\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian); // Create the exif object to store the tags:\n\n    data.exif = new ExifMap();\n\n    if (!options.disableExifOffsets) {\n      data.exifOffsets = new ExifMap();\n      data.exifTiffOffset = tiffOffset;\n      data.exifLittleEndian = littleEndian;\n    } // Parse the tags of the main image directory (IFD0) and retrieve the\n    // offset to the next directory (IFD1), usually the thumbnail directory:\n\n\n    dirOffset = parseExifTags(dataView, tiffOffset, tiffOffset + dirOffset, littleEndian, data.exif, data.exifOffsets, includeTags, excludeTags);\n\n    if (dirOffset && shouldIncludeTag(includeTags, excludeTags, 'ifd1')) {\n      data.exif.ifd1 = dirOffset;\n\n      if (data.exifOffsets) {\n        data.exifOffsets.ifd1 = tiffOffset + dirOffset;\n      }\n    }\n\n    Object.keys(data.exif.ifds).forEach(function (tagCode) {\n      parseExifIFD(data, tagCode, dataView, tiffOffset, littleEndian, includeTags, excludeTags);\n    });\n    thumbnailIFD = data.exif.ifd1; // Check for JPEG Thumbnail offset and data length:\n\n    if (thumbnailIFD && thumbnailIFD[0x0201]) {\n      thumbnailIFD[0x0201] = getExifThumbnail(dataView, tiffOffset + thumbnailIFD[0x0201], thumbnailIFD[0x0202] // Thumbnail data length\n      );\n    }\n  }; // Registers the Exif parser for the APP1 JPEG metadata segment:\n\n\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData);\n  loadImage.exifWriters = {\n    // Orientation writer:\n    0x0112: function _(buffer, data, value) {\n      var orientationOffset = data.exifOffsets[0x0112];\n      if (!orientationOffset) return buffer;\n      var view = new DataView(buffer, orientationOffset + 8, 2);\n      view.setUint16(0, value, data.exifLittleEndian);\n      return buffer;\n    }\n  };\n\n  loadImage.writeExifData = function (buffer, data, id, value) {\n    return loadImage.exifWriters[data.exif.map[id]](buffer, data, value);\n  };\n\n  loadImage.ExifMap = ExifMap; // Adds the following properties to the parseMetaData callback data:\n  // - exif: The parsed Exif tags\n  // - exifOffsets: The parsed Exif tag offsets\n  // - exifTiffOffset: TIFF header offset (used for offset pointers)\n  // - exifLittleEndian: little endian order if true, big endian if false\n  // Adds the following options to the parseMetaData method:\n  // - disableExif: Disables Exif parsing when true.\n  // - disableExifOffsets: Disables storing Exif tag offsets when true.\n  // - includeExifTags: A map of Exif tags to include for parsing.\n  // - excludeExifTags: A map of Exif tags to exclude from parsing.\n});","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/blueimp-load-image/js/load-image-exif.js"],"names":["factory","define","amd","module","exports","require","window","loadImage","ExifMap","tagCode","Object","defineProperty","value","ifds","map","tags","prototype","Orientation","Thumbnail","Blob","Exif","GPSInfo","Interoperability","ifd1","name","get","id","getExifThumbnail","dataView","offset","length","byteLength","console","log","bufferSlice","call","buffer","type","ExifTagTypes","getValue","dataOffset","getUint8","size","String","fromCharCode","ascii","littleEndian","getUint16","getUint32","getInt32","getExifValue","tiffOffset","tagType","tagSize","values","i","str","c","shouldIncludeTag","includeTags","excludeTags","parseExifTags","dirOffset","tagOffsets","tagsNumber","dirEndOffset","tagOffset","tagNumber","tagValue","parseExifIFD","data","exif","exifOffsets","parseExifData","options","disableExif","includeExifTags","excludeExifTags","thumbnailIFD","disableExifOffsets","exifTiffOffset","exifLittleEndian","keys","forEach","metaDataParsers","jpeg","push","exifWriters","orientationOffset","view","DataView","setUint16","writeExifData"],"mappings":"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","sourcesContent":["/*\n * JavaScript Load Image Exif Parser\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, DataView */\n\n/* eslint-disable no-console */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image', './load-image-meta'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'), require('./load-image-meta'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  /**\n   * Exif tag map\n   *\n   * @name ExifMap\n   * @class\n   * @param {number|string} tagCode IFD tag code\n   */\n  function ExifMap(tagCode) {\n    if (tagCode) {\n      Object.defineProperty(this, 'map', {\n        value: this.ifds[tagCode].map\n      })\n      Object.defineProperty(this, 'tags', {\n        value: (this.tags && this.tags[tagCode]) || {}\n      })\n    }\n  }\n\n  ExifMap.prototype.map = {\n    Orientation: 0x0112,\n    Thumbnail: 'ifd1',\n    Blob: 0x0201, // Alias for JPEGInterchangeFormat\n    Exif: 0x8769,\n    GPSInfo: 0x8825,\n    Interoperability: 0xa005\n  }\n\n  ExifMap.prototype.ifds = {\n    ifd1: { name: 'Thumbnail', map: ExifMap.prototype.map },\n    0x8769: { name: 'Exif', map: {} },\n    0x8825: { name: 'GPSInfo', map: {} },\n    0xa005: { name: 'Interoperability', map: {} }\n  }\n\n  /**\n   * Retrieves exif tag value\n   *\n   * @param {number|string} id Exif tag code or name\n   * @returns {object} Exif tag value\n   */\n  ExifMap.prototype.get = function (id) {\n    return this[id] || this[this.map[id]]\n  }\n\n  /**\n   * Returns the Exif Thumbnail data as Blob.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} offset Thumbnail data offset\n   * @param {number} length Thumbnail data length\n   * @returns {undefined|Blob} Returns the Thumbnail Blob or undefined\n   */\n  function getExifThumbnail(dataView, offset, length) {\n    if (!length) return\n    if (offset + length > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid thumbnail data.')\n      return\n    }\n    return new Blob(\n      [loadImage.bufferSlice.call(dataView.buffer, offset, offset + length)],\n      {\n        type: 'image/jpeg'\n      }\n    )\n  }\n\n  var ExifTagTypes = {\n    // byte, 8-bit unsigned int:\n    1: {\n      getValue: function (dataView, dataOffset) {\n        return dataView.getUint8(dataOffset)\n      },\n      size: 1\n    },\n    // ascii, 8-bit byte:\n    2: {\n      getValue: function (dataView, dataOffset) {\n        return String.fromCharCode(dataView.getUint8(dataOffset))\n      },\n      size: 1,\n      ascii: true\n    },\n    // short, 16 bit int:\n    3: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint16(dataOffset, littleEndian)\n      },\n      size: 2\n    },\n    // long, 32 bit int:\n    4: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getUint32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // rational = two long values, first is numerator, second is denominator:\n    5: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return (\n          dataView.getUint32(dataOffset, littleEndian) /\n          dataView.getUint32(dataOffset + 4, littleEndian)\n        )\n      },\n      size: 8\n    },\n    // slong, 32 bit signed int:\n    9: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return dataView.getInt32(dataOffset, littleEndian)\n      },\n      size: 4\n    },\n    // srational, two slongs, first is numerator, second is denominator:\n    10: {\n      getValue: function (dataView, dataOffset, littleEndian) {\n        return (\n          dataView.getInt32(dataOffset, littleEndian) /\n          dataView.getInt32(dataOffset + 4, littleEndian)\n        )\n      },\n      size: 8\n    }\n  }\n  // undefined, 8-bit byte, value depending on field:\n  ExifTagTypes[7] = ExifTagTypes[1]\n\n  /**\n   * Returns Exif tag value.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} offset Tag offset\n   * @param {number} type Tag type\n   * @param {number} length Tag length\n   * @param {boolean} littleEndian Little endian encoding\n   * @returns {object} Tag value\n   */\n  function getExifValue(\n    dataView,\n    tiffOffset,\n    offset,\n    type,\n    length,\n    littleEndian\n  ) {\n    var tagType = ExifTagTypes[type]\n    var tagSize\n    var dataOffset\n    var values\n    var i\n    var str\n    var c\n    if (!tagType) {\n      console.log('Invalid Exif data: Invalid tag type.')\n      return\n    }\n    tagSize = tagType.size * length\n    // Determine if the value is contained in the dataOffset bytes,\n    // or if the value at the dataOffset is a pointer to the actual data:\n    dataOffset =\n      tagSize > 4\n        ? tiffOffset + dataView.getUint32(offset + 8, littleEndian)\n        : offset + 8\n    if (dataOffset + tagSize > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid data offset.')\n      return\n    }\n    if (length === 1) {\n      return tagType.getValue(dataView, dataOffset, littleEndian)\n    }\n    values = []\n    for (i = 0; i < length; i += 1) {\n      values[i] = tagType.getValue(\n        dataView,\n        dataOffset + i * tagType.size,\n        littleEndian\n      )\n    }\n    if (tagType.ascii) {\n      str = ''\n      // Concatenate the chars:\n      for (i = 0; i < values.length; i += 1) {\n        c = values[i]\n        // Ignore the terminating NULL byte(s):\n        if (c === '\\u0000') {\n          break\n        }\n        str += c\n      }\n      return str\n    }\n    return values\n  }\n\n  /**\n   * Determines if the given tag should be included.\n   *\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   * @param {number|string} tagCode Tag code to check\n   * @returns {boolean} True if the tag should be included\n   */\n  function shouldIncludeTag(includeTags, excludeTags, tagCode) {\n    return (\n      (!includeTags || includeTags[tagCode]) &&\n      (!excludeTags || excludeTags[tagCode] !== true)\n    )\n  }\n\n  /**\n   * Parses Exif tags.\n   *\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {number} dirOffset Directory offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {ExifMap} tags Map to store parsed exif tags\n   * @param {ExifMap} tagOffsets Map to store parsed exif tag offsets\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   * @returns {number} Next directory offset\n   */\n  function parseExifTags(\n    dataView,\n    tiffOffset,\n    dirOffset,\n    littleEndian,\n    tags,\n    tagOffsets,\n    includeTags,\n    excludeTags\n  ) {\n    var tagsNumber, dirEndOffset, i, tagOffset, tagNumber, tagValue\n    if (dirOffset + 6 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory offset.')\n      return\n    }\n    tagsNumber = dataView.getUint16(dirOffset, littleEndian)\n    dirEndOffset = dirOffset + 2 + 12 * tagsNumber\n    if (dirEndOffset + 4 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid directory size.')\n      return\n    }\n    for (i = 0; i < tagsNumber; i += 1) {\n      tagOffset = dirOffset + 2 + 12 * i\n      tagNumber = dataView.getUint16(tagOffset, littleEndian)\n      if (!shouldIncludeTag(includeTags, excludeTags, tagNumber)) continue\n      tagValue = getExifValue(\n        dataView,\n        tiffOffset,\n        tagOffset,\n        dataView.getUint16(tagOffset + 2, littleEndian), // tag type\n        dataView.getUint32(tagOffset + 4, littleEndian), // tag length\n        littleEndian\n      )\n      tags[tagNumber] = tagValue\n      if (tagOffsets) {\n        tagOffsets[tagNumber] = tagOffset\n      }\n    }\n    // Return the offset to the next directory:\n    return dataView.getUint32(dirEndOffset, littleEndian)\n  }\n\n  /**\n   * Parses tags in a given IFD (Image File Directory).\n   *\n   * @param {object} data Data object to store exif tags and offsets\n   * @param {number|string} tagCode IFD tag code\n   * @param {DataView} dataView Data view interface\n   * @param {number} tiffOffset TIFF offset\n   * @param {boolean} littleEndian Little endian encoding\n   * @param {object} includeTags Map of tags to include\n   * @param {object} excludeTags Map of tags to exclude\n   */\n  function parseExifIFD(\n    data,\n    tagCode,\n    dataView,\n    tiffOffset,\n    littleEndian,\n    includeTags,\n    excludeTags\n  ) {\n    var dirOffset = data.exif[tagCode]\n    if (dirOffset) {\n      data.exif[tagCode] = new ExifMap(tagCode)\n      if (data.exifOffsets) {\n        data.exifOffsets[tagCode] = new ExifMap(tagCode)\n      }\n      parseExifTags(\n        dataView,\n        tiffOffset,\n        tiffOffset + dirOffset,\n        littleEndian,\n        data.exif[tagCode],\n        data.exifOffsets && data.exifOffsets[tagCode],\n        includeTags && includeTags[tagCode],\n        excludeTags && excludeTags[tagCode]\n      )\n    }\n  }\n\n  loadImage.parseExifData = function (dataView, offset, length, data, options) {\n    if (options.disableExif) {\n      return\n    }\n    var includeTags = options.includeExifTags\n    var excludeTags = options.excludeExifTags || {\n      0x8769: {\n        // ExifIFDPointer\n        0x927c: true // MakerNote\n      }\n    }\n    var tiffOffset = offset + 10\n    var littleEndian\n    var dirOffset\n    var thumbnailIFD\n    // Check for the ASCII code for \"Exif\" (0x45786966):\n    if (dataView.getUint32(offset + 4) !== 0x45786966) {\n      // No Exif data, might be XMP data instead\n      return\n    }\n    if (tiffOffset + 8 > dataView.byteLength) {\n      console.log('Invalid Exif data: Invalid segment size.')\n      return\n    }\n    // Check for the two null bytes:\n    if (dataView.getUint16(offset + 8) !== 0x0000) {\n      console.log('Invalid Exif data: Missing byte alignment offset.')\n      return\n    }\n    // Check the byte alignment:\n    switch (dataView.getUint16(tiffOffset)) {\n      case 0x4949:\n        littleEndian = true\n        break\n      case 0x4d4d:\n        littleEndian = false\n        break\n      default:\n        console.log('Invalid Exif data: Invalid byte alignment marker.')\n        return\n    }\n    // Check for the TIFF tag marker (0x002A):\n    if (dataView.getUint16(tiffOffset + 2, littleEndian) !== 0x002a) {\n      console.log('Invalid Exif data: Missing TIFF marker.')\n      return\n    }\n    // Retrieve the directory offset bytes, usually 0x00000008 or 8 decimal:\n    dirOffset = dataView.getUint32(tiffOffset + 4, littleEndian)\n    // Create the exif object to store the tags:\n    data.exif = new ExifMap()\n    if (!options.disableExifOffsets) {\n      data.exifOffsets = new ExifMap()\n      data.exifTiffOffset = tiffOffset\n      data.exifLittleEndian = littleEndian\n    }\n    // Parse the tags of the main image directory (IFD0) and retrieve the\n    // offset to the next directory (IFD1), usually the thumbnail directory:\n    dirOffset = parseExifTags(\n      dataView,\n      tiffOffset,\n      tiffOffset + dirOffset,\n      littleEndian,\n      data.exif,\n      data.exifOffsets,\n      includeTags,\n      excludeTags\n    )\n    if (dirOffset && shouldIncludeTag(includeTags, excludeTags, 'ifd1')) {\n      data.exif.ifd1 = dirOffset\n      if (data.exifOffsets) {\n        data.exifOffsets.ifd1 = tiffOffset + dirOffset\n      }\n    }\n    Object.keys(data.exif.ifds).forEach(function (tagCode) {\n      parseExifIFD(\n        data,\n        tagCode,\n        dataView,\n        tiffOffset,\n        littleEndian,\n        includeTags,\n        excludeTags\n      )\n    })\n    thumbnailIFD = data.exif.ifd1\n    // Check for JPEG Thumbnail offset and data length:\n    if (thumbnailIFD && thumbnailIFD[0x0201]) {\n      thumbnailIFD[0x0201] = getExifThumbnail(\n        dataView,\n        tiffOffset + thumbnailIFD[0x0201],\n        thumbnailIFD[0x0202] // Thumbnail data length\n      )\n    }\n  }\n\n  // Registers the Exif parser for the APP1 JPEG metadata segment:\n  loadImage.metaDataParsers.jpeg[0xffe1].push(loadImage.parseExifData)\n\n  loadImage.exifWriters = {\n    // Orientation writer:\n    0x0112: function (buffer, data, value) {\n      var orientationOffset = data.exifOffsets[0x0112]\n      if (!orientationOffset) return buffer\n      var view = new DataView(buffer, orientationOffset + 8, 2)\n      view.setUint16(0, value, data.exifLittleEndian)\n      return buffer\n    }\n  }\n\n  loadImage.writeExifData = function (buffer, data, id, value) {\n    return loadImage.exifWriters[data.exif.map[id]](buffer, data, value)\n  }\n\n  loadImage.ExifMap = ExifMap\n\n  // Adds the following properties to the parseMetaData callback data:\n  // - exif: The parsed Exif tags\n  // - exifOffsets: The parsed Exif tag offsets\n  // - exifTiffOffset: TIFF header offset (used for offset pointers)\n  // - exifLittleEndian: little endian order if true, big endian if false\n\n  // Adds the following options to the parseMetaData method:\n  // - disableExif: Disables Exif parsing when true.\n  // - disableExifOffsets: Disables storing Exif tag offsets when true.\n  // - includeExifTags: A map of Exif tags to include for parsing.\n  // - excludeExifTags: A map of Exif tags to exclude from parsing.\n})\n"]},"metadata":{},"sourceType":"script"}