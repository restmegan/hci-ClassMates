{"ast":null,"code":"'use strict';\n\nvar bail = require('bail');\n\nvar buffer = require('is-buffer');\n\nvar extend = require('extend');\n\nvar plain = require('is-plain-obj');\n\nvar trough = require('trough');\n\nvar vfile = require('vfile'); // Expose a frozen processor.\n\n\nmodule.exports = unified().freeze();\nvar slice = [].slice;\nvar own = {}.hasOwnProperty; // Process pipeline.\n\nvar pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);\n\nfunction pipelineParse(p, ctx) {\n  ctx.tree = p.parse(ctx.file);\n}\n\nfunction pipelineRun(p, ctx, next) {\n  p.run(ctx.tree, ctx.file, done);\n\n  function done(error, tree, file) {\n    if (error) {\n      next(error);\n    } else {\n      ctx.tree = tree;\n      ctx.file = file;\n      next();\n    }\n  }\n}\n\nfunction pipelineStringify(p, ctx) {\n  var result = p.stringify(ctx.tree, ctx.file);\n\n  if (result === undefined || result === null) {// Empty.\n  } else if (typeof result === 'string' || buffer(result)) {\n    ctx.file.contents = result;\n  } else {\n    ctx.file.result = result;\n  }\n} // Function to create the first processor.\n\n\nfunction unified() {\n  var attachers = [];\n  var transformers = trough();\n  var namespace = {};\n  var freezeIndex = -1;\n  var frozen; // Data management.\n\n  processor.data = data; // Lock.\n\n  processor.freeze = freeze; // Plugins.\n\n  processor.attachers = attachers;\n  processor.use = use; // API.\n\n  processor.parse = parse;\n  processor.stringify = stringify;\n  processor.run = run;\n  processor.runSync = runSync;\n  processor.process = process;\n  processor.processSync = processSync; // Expose.\n\n  return processor; // Create a new processor based on the processor in the current scope.\n\n  function processor() {\n    var destination = unified();\n    var index = -1;\n\n    while (++index < attachers.length) {\n      destination.use.apply(null, attachers[index]);\n    }\n\n    destination.data(extend(true, {}, namespace));\n    return destination;\n  } // Freeze: used to signal a processor that has finished configuration.\n  //\n  // For example, take unified itself: it’s frozen.\n  // Plugins should not be added to it.\n  // Rather, it should be extended, by invoking it, before modifying it.\n  //\n  // In essence, always invoke this when exporting a processor.\n\n\n  function freeze() {\n    var values;\n    var transformer;\n\n    if (frozen) {\n      return processor;\n    }\n\n    while (++freezeIndex < attachers.length) {\n      values = attachers[freezeIndex];\n\n      if (values[1] === false) {\n        continue;\n      }\n\n      if (values[1] === true) {\n        values[1] = undefined;\n      }\n\n      transformer = values[0].apply(processor, values.slice(1));\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer);\n      }\n    }\n\n    frozen = true;\n    freezeIndex = Infinity;\n    return processor;\n  } // Data management.\n  // Getter / setter for processor-specific informtion.\n\n\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n        namespace[key] = value;\n        return processor;\n      } // Get `key`.\n\n\n      return own.call(namespace, key) && namespace[key] || null;\n    } // Set space.\n\n\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    } // Get space.\n\n\n    return namespace;\n  } // Plugin management.\n  //\n  // Pass it:\n  // *   an attacher and options,\n  // *   a preset,\n  // *   a list of presets, attachers, and arguments (list of attachers and\n  //     options).\n\n\n  function use(value) {\n    var settings;\n    assertUnfrozen('use', frozen);\n\n    if (value === null || value === undefined) {// Empty.\n    } else if (typeof value === 'function') {\n      addPlugin.apply(null, arguments);\n    } else if (typeof value === 'object') {\n      if ('length' in value) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new Error('Expected usable value, not `' + value + '`');\n    }\n\n    if (settings) {\n      namespace.settings = extend(namespace.settings || {}, settings);\n    }\n\n    return processor;\n\n    function addPreset(result) {\n      addList(result.plugins);\n\n      if (result.settings) {\n        settings = extend(settings || {}, result.settings);\n      }\n    }\n\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if ('length' in value) {\n          addPlugin.apply(null, value);\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new Error('Expected usable value, not `' + value + '`');\n      }\n    }\n\n    function addList(plugins) {\n      var index = -1;\n\n      if (plugins === null || plugins === undefined) {// Empty.\n      } else if (typeof plugins === 'object' && 'length' in plugins) {\n        while (++index < plugins.length) {\n          add(plugins[index]);\n        }\n      } else {\n        throw new Error('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n\n    function addPlugin(plugin, value) {\n      var entry = find(plugin);\n\n      if (entry) {\n        if (plain(entry[1]) && plain(value)) {\n          value = extend(true, entry[1], value);\n        }\n\n        entry[1] = value;\n      } else {\n        attachers.push(slice.call(arguments));\n      }\n    }\n  }\n\n  function find(plugin) {\n    var index = -1;\n\n    while (++index < attachers.length) {\n      if (attachers[index][0] === plugin) {\n        return attachers[index];\n      }\n    }\n  } // Parse a file (in string or vfile representation) into a unist node using\n  // the `Parser` on the processor.\n\n\n  function parse(doc) {\n    var file = vfile(doc);\n    var Parser;\n    freeze();\n    Parser = processor.Parser;\n    assertParser('parse', Parser);\n\n    if (newable(Parser, 'parse')) {\n      return new Parser(String(file), file).parse();\n    }\n\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  } // Run transforms on a unist node representation of a file (in string or\n  // vfile representation), async.\n\n\n  function run(node, file, cb) {\n    assertNode(node);\n    freeze();\n\n    if (!cb && typeof file === 'function') {\n      cb = file;\n      file = null;\n    }\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      transformers.run(node, vfile(file), done);\n\n      function done(error, tree, file) {\n        tree = tree || node;\n\n        if (error) {\n          reject(error);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          cb(null, tree, file);\n        }\n      }\n    }\n  } // Run transforms on a unist node representation of a file (in string or\n  // vfile representation), sync.\n\n\n  function runSync(node, file) {\n    var result;\n    var complete;\n    run(node, file, done);\n    assertDone('runSync', 'run', complete);\n    return result;\n\n    function done(error, tree) {\n      complete = true;\n      result = tree;\n      bail(error);\n    }\n  } // Stringify a unist node representation of a file (in string or vfile\n  // representation) into a string using the `Compiler` on the processor.\n\n\n  function stringify(node, doc) {\n    var file = vfile(doc);\n    var Compiler;\n    freeze();\n    Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n\n    if (newable(Compiler, 'compile')) {\n      return new Compiler(node, file).compile();\n    }\n\n    return Compiler(node, file); // eslint-disable-line new-cap\n  } // Parse a file (in string or vfile representation) into a unist node using\n  // the `Parser` on the processor, then run transforms on that node, and\n  // compile the resulting node using the `Compiler` on the processor, and\n  // store that result on the vfile.\n\n\n  function process(doc, cb) {\n    freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      var file = vfile(doc);\n      pipeline.run(processor, {\n        file: file\n      }, done);\n\n      function done(error) {\n        if (error) {\n          reject(error);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          cb(null, file);\n        }\n      }\n    }\n  } // Process the given document (in string or vfile representation), sync.\n\n\n  function processSync(doc) {\n    var file;\n    var complete;\n    freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    file = vfile(doc);\n    process(file, done);\n    assertDone('processSync', 'process', complete);\n    return file;\n\n    function done(error) {\n      complete = true;\n      bail(error);\n    }\n  }\n} // Check if `value` is a constructor.\n\n\nfunction newable(value, name) {\n  return typeof value === 'function' && value.prototype && ( // A function with keys in its prototype is probably a constructor.\n  // Classes’ prototype methods are not enumerable, so we check if some value\n  // exists in the prototype.\n  keys(value.prototype) || name in value.prototype);\n} // Check if `value` is an object with keys.\n\n\nfunction keys(value) {\n  var key;\n\n  for (key in value) {\n    return true;\n  }\n\n  return false;\n} // Assert a parser is available.\n\n\nfunction assertParser(name, Parser) {\n  if (typeof Parser !== 'function') {\n    throw new Error('Cannot `' + name + '` without `Parser`');\n  }\n} // Assert a compiler is available.\n\n\nfunction assertCompiler(name, Compiler) {\n  if (typeof Compiler !== 'function') {\n    throw new Error('Cannot `' + name + '` without `Compiler`');\n  }\n} // Assert the processor is not frozen.\n\n\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error('Cannot invoke `' + name + '` on a frozen processor.\\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.');\n  }\n} // Assert `node` is a unist node.\n\n\nfunction assertNode(node) {\n  if (!node || typeof node.type !== 'string') {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n} // Assert that `complete` is `true`.\n\n\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/unified/index.js"],"names":["bail","require","buffer","extend","plain","trough","vfile","module","exports","unified","freeze","slice","own","hasOwnProperty","pipeline","use","pipelineParse","pipelineRun","pipelineStringify","p","ctx","tree","parse","file","next","run","done","error","result","stringify","undefined","contents","attachers","transformers","namespace","freezeIndex","frozen","processor","data","runSync","process","processSync","destination","index","length","apply","values","transformer","Infinity","key","value","arguments","assertUnfrozen","call","settings","addPlugin","addList","addPreset","Error","plugins","add","plugin","entry","find","push","doc","Parser","assertParser","newable","String","node","cb","assertNode","Promise","executor","resolve","reject","complete","assertDone","Compiler","assertCompiler","compile","name","prototype","keys","type","asyncName"],"mappings":"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","sourcesContent":["'use strict'\n\nvar bail = require('bail')\nvar buffer = require('is-buffer')\nvar extend = require('extend')\nvar plain = require('is-plain-obj')\nvar trough = require('trough')\nvar vfile = require('vfile')\n\n// Expose a frozen processor.\nmodule.exports = unified().freeze()\n\nvar slice = [].slice\nvar own = {}.hasOwnProperty\n\n// Process pipeline.\nvar pipeline = trough()\n  .use(pipelineParse)\n  .use(pipelineRun)\n  .use(pipelineStringify)\n\nfunction pipelineParse(p, ctx) {\n  ctx.tree = p.parse(ctx.file)\n}\n\nfunction pipelineRun(p, ctx, next) {\n  p.run(ctx.tree, ctx.file, done)\n\n  function done(error, tree, file) {\n    if (error) {\n      next(error)\n    } else {\n      ctx.tree = tree\n      ctx.file = file\n      next()\n    }\n  }\n}\n\nfunction pipelineStringify(p, ctx) {\n  var result = p.stringify(ctx.tree, ctx.file)\n\n  if (result === undefined || result === null) {\n    // Empty.\n  } else if (typeof result === 'string' || buffer(result)) {\n    ctx.file.contents = result\n  } else {\n    ctx.file.result = result\n  }\n}\n\n// Function to create the first processor.\nfunction unified() {\n  var attachers = []\n  var transformers = trough()\n  var namespace = {}\n  var freezeIndex = -1\n  var frozen\n\n  // Data management.\n  processor.data = data\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  processor.run = run\n  processor.runSync = runSync\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  function processor() {\n    var destination = unified()\n    var index = -1\n\n    while (++index < attachers.length) {\n      destination.use.apply(null, attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  // Freeze: used to signal a processor that has finished configuration.\n  //\n  // For example, take unified itself: it’s frozen.\n  // Plugins should not be added to it.\n  // Rather, it should be extended, by invoking it, before modifying it.\n  //\n  // In essence, always invoke this when exporting a processor.\n  function freeze() {\n    var values\n    var transformer\n\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      values = attachers[freezeIndex]\n\n      if (values[1] === false) {\n        continue\n      }\n\n      if (values[1] === true) {\n        values[1] = undefined\n      }\n\n      transformer = values[0].apply(processor, values.slice(1))\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Infinity\n\n    return processor\n  }\n\n  // Data management.\n  // Getter / setter for processor-specific informtion.\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  // Plugin management.\n  //\n  // Pass it:\n  // *   an attacher and options,\n  // *   a preset,\n  // *   a list of presets, attachers, and arguments (list of attachers and\n  //     options).\n  function use(value) {\n    var settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin.apply(null, arguments)\n    } else if (typeof value === 'object') {\n      if ('length' in value) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new Error('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = extend(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = extend(settings || {}, result.settings)\n      }\n    }\n\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if ('length' in value) {\n          addPlugin.apply(null, value)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new Error('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    function addList(plugins) {\n      var index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (typeof plugins === 'object' && 'length' in plugins) {\n        while (++index < plugins.length) {\n          add(plugins[index])\n        }\n      } else {\n        throw new Error('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    function addPlugin(plugin, value) {\n      var entry = find(plugin)\n\n      if (entry) {\n        if (plain(entry[1]) && plain(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        attachers.push(slice.call(arguments))\n      }\n    }\n  }\n\n  function find(plugin) {\n    var index = -1\n\n    while (++index < attachers.length) {\n      if (attachers[index][0] === plugin) {\n        return attachers[index]\n      }\n    }\n  }\n\n  // Parse a file (in string or vfile representation) into a unist node using\n  // the `Parser` on the processor.\n  function parse(doc) {\n    var file = vfile(doc)\n    var Parser\n\n    freeze()\n    Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      return new Parser(String(file), file).parse()\n    }\n\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  // Run transforms on a unist node representation of a file (in string or\n  // vfile representation), async.\n  function run(node, file, cb) {\n    assertNode(node)\n    freeze()\n\n    if (!cb && typeof file === 'function') {\n      cb = file\n      file = null\n    }\n\n    if (!cb) {\n      return new Promise(executor)\n    }\n\n    executor(null, cb)\n\n    function executor(resolve, reject) {\n      transformers.run(node, vfile(file), done)\n\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          cb(null, tree, file)\n        }\n      }\n    }\n  }\n\n  // Run transforms on a unist node representation of a file (in string or\n  // vfile representation), sync.\n  function runSync(node, file) {\n    var result\n    var complete\n\n    run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    return result\n\n    function done(error, tree) {\n      complete = true\n      result = tree\n      bail(error)\n    }\n  }\n\n  // Stringify a unist node representation of a file (in string or vfile\n  // representation) into a string using the `Compiler` on the processor.\n  function stringify(node, doc) {\n    var file = vfile(doc)\n    var Compiler\n\n    freeze()\n    Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      return new Compiler(node, file).compile()\n    }\n\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  // Parse a file (in string or vfile representation) into a unist node using\n  // the `Parser` on the processor, then run transforms on that node, and\n  // compile the resulting node using the `Compiler` on the processor, and\n  // store that result on the vfile.\n  function process(doc, cb) {\n    freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!cb) {\n      return new Promise(executor)\n    }\n\n    executor(null, cb)\n\n    function executor(resolve, reject) {\n      var file = vfile(doc)\n\n      pipeline.run(processor, {file: file}, done)\n\n      function done(error) {\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          cb(null, file)\n        }\n      }\n    }\n  }\n\n  // Process the given document (in string or vfile representation), sync.\n  function processSync(doc) {\n    var file\n    var complete\n\n    freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n    file = vfile(doc)\n\n    process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n// Check if `value` is a constructor.\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n// Check if `value` is an object with keys.\nfunction keys(value) {\n  var key\n  for (key in value) {\n    return true\n  }\n\n  return false\n}\n\n// Assert a parser is available.\nfunction assertParser(name, Parser) {\n  if (typeof Parser !== 'function') {\n    throw new Error('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n// Assert a compiler is available.\nfunction assertCompiler(name, Compiler) {\n  if (typeof Compiler !== 'function') {\n    throw new Error('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n// Assert the processor is not frozen.\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot invoke `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n// Assert `node` is a unist node.\nfunction assertNode(node) {\n  if (!node || typeof node.type !== 'string') {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n}\n\n// Assert that `complete` is `true`.\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}