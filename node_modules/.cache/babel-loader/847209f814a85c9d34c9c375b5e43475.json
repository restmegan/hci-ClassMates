{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\n\n\nfunction getOptionLabel(option, labelKey) {\n  var optionLabel = void 0;\n\n  if (typeof option === 'string') {\n    optionLabel = option;\n  }\n\n  if (typeof labelKey === 'function') {\n    // This overwrites string options, but we assume the consumer wants to do\n    // something custom if `labelKey` is a function.\n    optionLabel = labelKey(option);\n  } else if (typeof labelKey === 'string' && (0, _isPlainObject2.default)(option)) {\n    optionLabel = option[labelKey];\n  }\n\n  !(typeof optionLabel === 'string') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : (0, _invariant2.default)(false) : void 0;\n  return optionLabel;\n}\n\nexports.default = getOptionLabel;","map":{"version":3,"sources":["/Users/annaisthebest/Desktop/hci-ClassMates/node_modules/react-bootstrap-typeahead/lib/utils/getOptionLabel.js"],"names":["Object","defineProperty","exports","value","_invariant","require","_invariant2","_interopRequireDefault","_isPlainObject","_isPlainObject2","obj","__esModule","default","getOptionLabel","option","labelKey","optionLabel","process","env","NODE_ENV"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,UAAU,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AAEA,IAAIC,WAAW,GAAGC,sBAAsB,CAACH,UAAD,CAAxC;;AAEA,IAAII,cAAc,GAAGH,OAAO,CAAC,sBAAD,CAA5B;;AAEA,IAAII,eAAe,GAAGF,sBAAsB,CAACC,cAAD,CAA5C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;;;AACA,SAASG,cAAT,CAAwBC,MAAxB,EAAgCC,QAAhC,EAA0C;AACxC,MAAIC,WAAW,GAAG,KAAK,CAAvB;;AAEA,MAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC9BE,IAAAA,WAAW,GAAGF,MAAd;AACD;;AAED,MAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClC;AACA;AACAC,IAAAA,WAAW,GAAGD,QAAQ,CAACD,MAAD,CAAtB;AACD,GAJD,MAIO,IAAI,OAAOC,QAAP,KAAoB,QAApB,IAAgC,CAAC,GAAGN,eAAe,CAACG,OAApB,EAA6BE,MAA7B,CAApC,EAA0E;AAC/EE,IAAAA,WAAW,GAAGF,MAAM,CAACC,QAAD,CAApB;AACD;;AAED,IAAE,OAAOC,WAAP,KAAuB,QAAzB,IAAqCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGb,WAAW,CAACM,OAAhB,EAAyB,KAAzB,EAAgC,uEAAuE,uEAAvE,GAAiJ,8CAAjL,CAAxC,GAA2Q,CAAC,GAAGN,WAAW,CAACM,OAAhB,EAAyB,KAAzB,CAAhT,GAAkV,KAAK,CAAvV;AAEA,SAAOI,WAAP;AACD;;AAEDd,OAAO,CAACU,OAAR,GAAkBC,cAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\nfunction getOptionLabel(option, labelKey) {\n  var optionLabel = void 0;\n\n  if (typeof option === 'string') {\n    optionLabel = option;\n  }\n\n  if (typeof labelKey === 'function') {\n    // This overwrites string options, but we assume the consumer wants to do\n    // something custom if `labelKey` is a function.\n    optionLabel = labelKey(option);\n  } else if (typeof labelKey === 'string' && (0, _isPlainObject2.default)(option)) {\n    optionLabel = option[labelKey];\n  }\n\n  !(typeof optionLabel === 'string') ? process.env.NODE_ENV !== 'production' ? (0, _invariant2.default)(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : (0, _invariant2.default)(false) : void 0;\n\n  return optionLabel;\n}\n\nexports.default = getOptionLabel;"]},"metadata":{},"sourceType":"script"}