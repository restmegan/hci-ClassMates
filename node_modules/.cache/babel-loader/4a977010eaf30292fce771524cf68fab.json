{"ast":null,"code":"import _objectSpread from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { ScrollView, Platform, FlatList, SectionList, RefreshControl } from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\nvar WrappedScrollView;\n\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  var onRefresh = props.onRefresh;\n\n  if (onRefresh) {\n    invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');\n    return _objectSpread(_objectSpread({}, props), {}, {\n      refreshControl: props.refreshControl == null ? /*#__PURE__*/React.createElement(RefreshControl, {\n        refreshing: props.refreshing,\n        onRefresh: onRefresh,\n        progressViewOffset: props.progressViewOffset\n      }) : props.refreshControl\n    });\n  } else {\n    return props;\n  }\n}\n\nvar WrappedFlatList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(FlatList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return /*#__PURE__*/React.createElement(WrappedScrollView, propsMaybeWithRefreshControl(props));\n    }\n  }));\n});\nvar WrappedSectionList = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SectionList, _extends({\n    ref: ref\n  }, props, {\n    renderScrollComponent: function renderScrollComponent(props) {\n      return /*#__PURE__*/React.createElement(WrappedScrollView, propsMaybeWithRefreshControl(props));\n    }\n  }));\n});\nexport { WrappedScrollView as ScrollView, WrappedFlatList as FlatList, WrappedSectionList as SectionList };","map":{"version":3,"sources":["Scrollables.js"],"names":["ScrollView","Platform","WrappedScrollView","createNavigationAwareScrollable","onRefresh","props","invariant","JSON","refreshControl","progressViewOffset","WrappedFlatList","ref","propsMaybeWithRefreshControl","WrappedSectionList"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,EAAA,QAAA,EAAA,QAAA,EAAA,WAAA,EAAA,cAAA,QAAA,cAAA;AAOA,SAASA,UAAU,IAAnB,YAAA,QAAA,8BAAA;AACA,OAAA,+BAAA,MAAA,mCAAA;AACA,OAAA,SAAA,MAAA,mBAAA;AAEA,IAAA,iBAAA;;AACA,IAAIC,QAAQ,CAARA,EAAAA,KAAJ,SAAA,EAA+B;AAC7B;AACA;AACA;AACAC,EAAAA,iBAAiB,GAAGC,+BAA+B,CAAnDD,UAAmD,CAAnDA;AAJF,CAAA,MAKO;AACLA,EAAAA,iBAAiB,GAAGC,+BAA+B,CAAnDD,YAAmD,CAAnDA;AACD;;AAED,SAAA,4BAAA,CAAA,KAAA,EAA6C;AAC3C,MAAME,SAAS,GAAGC,KAAK,CAAvB,SAAA;;AACA,MAAA,SAAA,EAAe;AACbC,IAAAA,SAAS,CACP,OAAOD,KAAK,CAAZ,UAAA,KADO,SAAA,EAEP,sFACEE,IAAI,CAAJA,SAAAA,CAAeF,KAAK,CADtB,UACEE,CADF,GAFFD,GAAS,CAATA;AAMA,2CAAO,KAAP;AAEEE,MAAAA,cAAc,EACZ,KAAK,CAAL,cAAA,IAAA,IAAA,GAAA,aACE,KAAA,CAAA,aAAA,CAAA,cAAA,EAAA;AACE,QAAA,UAAU,EAAEH,KAAK,CADnB,UAAA;AAEE,QAAA,SAAS,EAFX,SAAA;AAGE,QAAA,kBAAkB,EAAEA,KAAK,CAACI;AAH5B,OAAA,CADF,GAOEJ,KAAK,CAACG;AAVZ;AAPF,GAAA,MAoBO;AACL,WAAA,KAAA;AACD;AACF;;AAED,IAAME,eAAe,GAAA,aAAG,KAAK,CAAL,UAAA,CAAiB,UAAA,KAAA,EAAA,GAAA;AAAA,SAAA,aACvC,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EAAEC;AADP,GAAA,EAAA,KAAA,EAAA;AAGE,IAAA,qBAAqB,EAAGN,+BAAAA,KAAD;AAAA,aAAA,aACrB,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB;AAAA;AAHzB,GAAA,CAAA,CADuC;AAAA,CAAjB,CAAxB;AAUA,IAAMC,kBAAkB,GAAA,aAAG,KAAK,CAAL,UAAA,CAAiB,UAAA,KAAA,EAAA,GAAA;AAAA,SAAA,aAC1C,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EAAEF;AADP,GAAA,EAAA,KAAA,EAAA;AAGE,IAAA,qBAAqB,EAAGN,+BAAAA,KAAD;AAAA,aAAA,aACrB,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAuBO,4BAA4B,CAAnD,KAAmD,CAAnD,CADqB;AAAA;AAHzB,GAAA,CAAA,CAD0C;AAAA,CAAjB,CAA3B;AAUA,SACEV,iBAAiB,IADnB,UAAA,EAEEQ,eAAe,IAFjB,QAAA,EAGEG,kBAAkB,IAHpB,WAAA","sourcesContent":["import * as React from 'react';\nimport {\n  ScrollView,\n  Platform,\n  FlatList,\n  SectionList,\n  RefreshControl,\n} from 'react-native';\nimport { ScrollView as GHScrollView } from 'react-native-gesture-handler';\nimport createNavigationAwareScrollable from './createNavigationAwareScrollable';\nimport invariant from './utils/invariant';\n\nlet WrappedScrollView;\nif (Platform.OS === 'android') {\n  // @todo: use GHScrollView again when\n  // https://github.com/kmagiera/react-native-gesture-handler/issues/560 has\n  // been fixed.\n  WrappedScrollView = createNavigationAwareScrollable(ScrollView);\n} else {\n  WrappedScrollView = createNavigationAwareScrollable(GHScrollView);\n}\n\nfunction propsMaybeWithRefreshControl(props) {\n  const onRefresh = props.onRefresh;\n  if (onRefresh) {\n    invariant(\n      typeof props.refreshing === 'boolean',\n      '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' +\n        JSON.stringify(props.refreshing) +\n        '`'\n    );\n    return {\n      ...props,\n      refreshControl:\n        props.refreshControl == null ? (\n          <RefreshControl\n            refreshing={props.refreshing}\n            onRefresh={onRefresh}\n            progressViewOffset={props.progressViewOffset}\n          />\n        ) : (\n          props.refreshControl\n        ),\n    };\n  } else {\n    return props;\n  }\n}\n\nconst WrappedFlatList = React.forwardRef((props, ref) => (\n  <FlatList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nconst WrappedSectionList = React.forwardRef((props, ref) => (\n  <SectionList\n    ref={ref}\n    {...props}\n    renderScrollComponent={(props) => (\n      <WrappedScrollView {...propsMaybeWithRefreshControl(props)} />\n    )}\n  />\n));\n\nexport {\n  WrappedScrollView as ScrollView,\n  WrappedFlatList as FlatList,\n  WrappedSectionList as SectionList,\n};\n"]},"metadata":{},"sourceType":"module"}