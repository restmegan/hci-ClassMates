{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallbackRef } from './useRef';\nimport { assignRef } from './assignRef';\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\n\nexport function useMergeRefs(refs, defaultValue) {\n  _s();\n\n  return useCallbackRef(defaultValue, function (newValue) {\n    return refs.forEach(function (ref) {\n      return assignRef(ref, newValue);\n    });\n  });\n}\n\n_s(useMergeRefs, \"j2rTcb2Qf7Rjz3ftF+hu2RF4YCY=\", false, function () {\n  return [useCallbackRef];\n});","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/ChatPageUI/node_modules/use-callback-ref/dist/es2015/useMergeRef.js"],"names":["useCallbackRef","assignRef","useMergeRefs","refs","defaultValue","newValue","forEach","ref"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,YAA5B,EAA0C;AAAA;;AAC7C,SAAOJ,cAAc,CAACI,YAAD,EAAe,UAAUC,QAAV,EAAoB;AACpD,WAAOF,IAAI,CAACG,OAAL,CAAa,UAAUC,GAAV,EAAe;AAAE,aAAON,SAAS,CAACM,GAAD,EAAMF,QAAN,CAAhB;AAAkC,KAAhE,CAAP;AACH,GAFoB,CAArB;AAGH;;GAJeH,Y;UACLF,c","sourcesContent":["import { useCallbackRef } from './useRef';\nimport { assignRef } from './assignRef';\n/**\n * Merges two or more refs together providing a single interface to set their value\n * @param {RefObject|Ref} refs\n * @returns {MutableRefObject} - a new ref, which translates all changes to {refs}\n *\n * @see {@link mergeRefs} a version without buit-in memoization\n * @see https://github.com/theKashey/use-callback-ref#usemergerefs\n * @example\n * const Component = React.forwardRef((props, ref) => {\n *   const ownRef = useRef();\n *   const domRef = useMergeRefs([ref, ownRef]); // ðŸ‘ˆ merge together\n *   return <div ref={domRef}>...</div>\n * }\n */\nexport function useMergeRefs(refs, defaultValue) {\n    return useCallbackRef(defaultValue, function (newValue) {\n        return refs.forEach(function (ref) { return assignRef(ref, newValue); });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}