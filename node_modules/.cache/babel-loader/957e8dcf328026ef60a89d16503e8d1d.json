{"ast":null,"code":"import _classCallCheck from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/InboxComponent.js\";\nimport React, { Component } from \"react\";\nimport Talk from \"talkjs\";\nimport \"./styles.css\";\nimport { useState } from 'react'; // Creates a TalkJS user assuming that the currentUser is passed as a prop to\n// our component. The Talk.User object is used to synchronize user data with\n// TalkJS, so we can display it inside the chat UI.\n// class InboxComponent extends Component {\n//\n//   //Creating a ref\n//   constructor(props) {\n//     super(props);\n//     this.talkjsContainer = React.createRef();\n//   }\n//\n//   componentDidMount() {\n//       const currentUser = this.props.currentUser;\n//       Talk.ready.then(() => {\n//         var me = new Talk.User({\n//           // Using dummy hardcode, the defining code is commented out for now\n//           id: \"123456\", //currentUser.id,\n//           name: \"Alice\", //currentUser.name,\n//           email: \"alfie@example.com\", //currentUser.email,\n//           photoUrl: \"https://demo.talkjs.com/img/alice.jpg\", //currentUser.photo,\n//           welcomeMessage: \"Hey there! How are you? :-)\"\n//         });\n//\n//         //Creating a TalkJS session. A session represents a user's active browser tab.\n//         //It also authenticates your app with TalkJS.\n//         window.talkSession = new Talk.Session({\n//           appId: \"tNfx4wm8\",  //This is a custom appId generated from our TalkJS trial\n//           me: me\n//         });\n//\n//         // Hard-coded dummy user to test chatting with\n//         var johnSmith = new Talk.User({\n//           id: \"654321\",\n//           name: \"John Smith\",\n//           email: \"johnsmith@example.com\",\n//           photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n//           welcomeMessage: \"Hey, how can I help?\"\n//         });\n//\n//         // Creating sample conversation\n//         var conversation = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, johnSmith))\n//         conversation.setParticipant(me);\n//         conversation.setParticipant(johnSmith);\n//\n//         // Creating an inbox\n//         var inbox = window.talkSession.createInbox({selected: conversation});\n//         inbox.mount(this.talkjsContainer.current); //Mounting the inbox\n//     });\n//   }\n//\n//   render() {\n//     return (<div ref={this.talkjsContainer} className=\"chatbox-container\"></div>)\n//   }\n//\n// }\n//\n//\n// export default InboxComponent;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar InboxApp = /*#__PURE__*/function (_React$Component) {\n  _inherits(InboxApp, _React$Component);\n\n  var _super = _createSuper(InboxApp);\n\n  function InboxApp(props) {\n    var _this;\n\n    _classCallCheck(this, InboxApp);\n\n    _this = _super.call(this, props);\n    _this.talkjsContainer = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(InboxApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Talk.ready.then(function () {\n        var me = new Talk.User({\n          id: parseInt(Math.random() * 500000).toString(),\n          name: \"Alice\",\n          email: \"demo@talkjs.com\",\n          photoUrl: \"https://demo.talkjs.com/img/alice.jpg\",\n          welcomeMessage: \"Hey there! How are you? :-)\",\n          role: \"booker\"\n        });\n        window.talkSession = new Talk.Session({\n          appId: \"Hku1c4Pt\",\n          me: me\n        });\n        var other = new Talk.User({\n          id: parseInt(Math.random() * 500000).toString(),\n          name: \"Sebastian\",\n          email: \"demo@talkjs.com\",\n          photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n          welcomeMessage: \"Hey, how can I help?\",\n          role: \"booker\"\n        });\n        var conversation = talkSession.getOrCreateConversation(Talk.oneOnOneId(me, other));\n        conversation.setParticipant(me);\n        conversation.setParticipant(other);\n        var inbox = talkSession.createInbox({\n          selected: conversation\n        });\n        inbox.mount(_this2.talkjsContainer.current);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.talkjsContainer,\n        className: \"chatbox-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return InboxApp;\n}(React.Component);\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(InboxApp, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 113,\n  columnNumber: 17\n}, this), document.querySelector(\"#app\"));","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/InboxComponent.js"],"names":["React","Component","Talk","useState","InboxApp","props","talkjsContainer","createRef","ready","then","me","User","id","parseInt","Math","random","toString","name","email","photoUrl","welcomeMessage","role","window","talkSession","Session","appId","other","conversation","getOrCreateConversation","oneOnOneId","setParticipant","inbox","createInbox","selected","mount","current","ReactDOM","render","document","querySelector"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAO,cAAP;AACA,SAAQC,QAAR,QAAuB,OAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;IAEMC,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,eAAL,gBAAuBN,KAAK,CAACO,SAAN,EAAvB;AAFiB;AAGlB;;;;WAED,6BAAoB;AAAA;;AAClBL,MAAAA,IAAI,CAACM,KAAL,CAAWC,IAAX,CAAgB,YAAM;AACpB,YAAIC,EAAE,GAAG,IAAIR,IAAI,CAACS,IAAT,CAAc;AACrBC,UAAAA,EAAE,EAAEC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAc,MAAf,CAAR,CAA+BC,QAA/B,EADiB;AAErBC,UAAAA,IAAI,EAAE,OAFe;AAGrBC,UAAAA,KAAK,EAAE,iBAHc;AAIrBC,UAAAA,QAAQ,EAAE,uCAJW;AAKrBC,UAAAA,cAAc,EAAE,6BALK;AAMrBC,UAAAA,IAAI,EAAE;AANe,SAAd,CAAT;AASAC,QAAAA,MAAM,CAACC,WAAP,GAAqB,IAAIrB,IAAI,CAACsB,OAAT,CAAiB;AACpCC,UAAAA,KAAK,EAAE,UAD6B;AAEpCf,UAAAA,EAAE,EAAEA;AAFgC,SAAjB,CAArB;AAKA,YAAIgB,KAAK,GAAG,IAAIxB,IAAI,CAACS,IAAT,CAAc;AACxBC,UAAAA,EAAE,EAAEC,QAAQ,CAACC,IAAI,CAACC,MAAL,KAAc,MAAf,CAAR,CAA+BC,QAA/B,EADoB;AAExBC,UAAAA,IAAI,EAAE,WAFkB;AAGxBC,UAAAA,KAAK,EAAE,iBAHiB;AAIxBC,UAAAA,QAAQ,EAAE,2CAJc;AAKxBC,UAAAA,cAAc,EAAE,sBALQ;AAMxBC,UAAAA,IAAI,EAAE;AANkB,SAAd,CAAZ;AASA,YAAIM,YAAY,GAAGJ,WAAW,CAACK,uBAAZ,CAAoC1B,IAAI,CAAC2B,UAAL,CAAgBnB,EAAhB,EAAoBgB,KAApB,CAApC,CAAnB;AACAC,QAAAA,YAAY,CAACG,cAAb,CAA4BpB,EAA5B;AACAiB,QAAAA,YAAY,CAACG,cAAb,CAA4BJ,KAA5B;AAEA,YAAIK,KAAK,GAAGR,WAAW,CAACS,WAAZ,CAAwB;AAACC,UAAAA,QAAQ,EAAEN;AAAX,SAAxB,CAAZ;AACAI,QAAAA,KAAK,CAACG,KAAN,CAAY,MAAI,CAAC5B,eAAL,CAAqB6B,OAAjC;AACD,OA9BD;AA+BD;;;WAED,kBAAS;AACP,0BACE;AAAK,QAAA,GAAG,EAAE,KAAK7B,eAAf;AAAgC,QAAA,SAAS,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cADF;AAGD;;;;EA5CoBN,KAAK,CAACC,S;;AA+C7BmC,QAAQ,CAACC,MAAT,eAAgB,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA8BC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAA9B","sourcesContent":["import React, { Component } from \"react\";\nimport Talk from \"talkjs\";\n\nimport \"./styles.css\";\nimport {useState} from 'react';\n\n// Creates a TalkJS user assuming that the currentUser is passed as a prop to\n// our component. The Talk.User object is used to synchronize user data with\n// TalkJS, so we can display it inside the chat UI.\n// class InboxComponent extends Component {\n//\n//   //Creating a ref\n//   constructor(props) {\n//     super(props);\n//     this.talkjsContainer = React.createRef();\n//   }\n//\n//   componentDidMount() {\n//       const currentUser = this.props.currentUser;\n//       Talk.ready.then(() => {\n//         var me = new Talk.User({\n//           // Using dummy hardcode, the defining code is commented out for now\n//           id: \"123456\", //currentUser.id,\n//           name: \"Alice\", //currentUser.name,\n//           email: \"alfie@example.com\", //currentUser.email,\n//           photoUrl: \"https://demo.talkjs.com/img/alice.jpg\", //currentUser.photo,\n//           welcomeMessage: \"Hey there! How are you? :-)\"\n//         });\n//\n//         //Creating a TalkJS session. A session represents a user's active browser tab.\n//         //It also authenticates your app with TalkJS.\n//         window.talkSession = new Talk.Session({\n//           appId: \"tNfx4wm8\",  //This is a custom appId generated from our TalkJS trial\n//           me: me\n//         });\n//\n//         // Hard-coded dummy user to test chatting with\n//         var johnSmith = new Talk.User({\n//           id: \"654321\",\n//           name: \"John Smith\",\n//           email: \"johnsmith@example.com\",\n//           photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n//           welcomeMessage: \"Hey, how can I help?\"\n//         });\n//\n//         // Creating sample conversation\n//         var conversation = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, johnSmith))\n//         conversation.setParticipant(me);\n//         conversation.setParticipant(johnSmith);\n//\n//         // Creating an inbox\n//         var inbox = window.talkSession.createInbox({selected: conversation});\n//         inbox.mount(this.talkjsContainer.current); //Mounting the inbox\n//     });\n//   }\n//\n//   render() {\n//     return (<div ref={this.talkjsContainer} className=\"chatbox-container\"></div>)\n//   }\n//\n// }\n//\n//\n// export default InboxComponent;\n\nclass InboxApp extends React.Component {\n  constructor(props) {\n    super(props)\n    this.talkjsContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    Talk.ready.then(() => {\n      var me = new Talk.User({\n        id: parseInt(Math.random()*500000).toString(),\n        name: \"Alice\",\n        email: \"demo@talkjs.com\",\n        photoUrl: \"https://demo.talkjs.com/img/alice.jpg\",\n        welcomeMessage: \"Hey there! How are you? :-)\",\n        role: \"booker\"\n      });\n\n      window.talkSession = new Talk.Session({\n        appId: \"Hku1c4Pt\",\n        me: me\n      });\n\n      var other = new Talk.User({\n        id: parseInt(Math.random()*500000).toString(),\n        name: \"Sebastian\",\n        email: \"demo@talkjs.com\",\n        photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n        welcomeMessage: \"Hey, how can I help?\",\n        role: \"booker\"\n      });\n\n      var conversation = talkSession.getOrCreateConversation(Talk.oneOnOneId(me, other));\n      conversation.setParticipant(me);\n      conversation.setParticipant(other);\n\n      var inbox = talkSession.createInbox({selected: conversation});\n      inbox.mount(this.talkjsContainer.current);\n    });\n  }\n\n  render() {\n    return (\n      <div ref={this.talkjsContainer} className=\"chatbox-container\"></div>\n    )\n  }\n}\n\nReactDOM.render(<InboxApp />, document.querySelector(\"#app\"))\n"]},"metadata":{},"sourceType":"module"}