{"ast":null,"code":"import _objectSpread from \"/Users/annaisthebest/Desktop/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/annaisthebest/Desktop/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/annaisthebest/Desktop/hci-ClassMates/src/streamchats-code/src/components/MessagingInput/MessagingInput.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useState } from 'react';\nimport { ImageDropzone } from 'react-file-utils';\nimport { logChatPromiseExecution } from 'stream-chat';\nimport { ChannelContext, ChatAutoComplete, EmojiPicker, useMessageInput } from 'stream-chat-react';\nimport './MessagingInput.css';\nimport { // CommandIcon,\nEmojiIcon, LightningBoltSmall, SendIcon } from '../../assets';\nimport { UploadsPreview } from './UploadsPreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar GiphyIcon = function GiphyIcon() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"giphy-icon__wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(LightningBoltSmall, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"giphy-icon__text\",\n      children: \"GIPHY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = GiphyIcon;\n\nvar MessagingInput = function MessagingInput(props) {\n  _s();\n\n  var _useContext = useContext(ChannelContext),\n      acceptedFiles = _useContext.acceptedFiles,\n      maxNumberOfFiles = _useContext.maxNumberOfFiles,\n      multipleUploads = _useContext.multipleUploads,\n      sendMessage = _useContext.sendMessage;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      giphyState = _useState2[0],\n      setGiphyState = _useState2[1];\n\n  var overrideSubmitHandler = function overrideSubmitHandler(message) {\n    var updatedMessage;\n\n    if (message.attachments.length && message.text.startsWith('/giphy')) {\n      var updatedText = message.text.replace('/giphy', '');\n      updatedMessage = _objectSpread(_objectSpread({}, message), {}, {\n        text: updatedText\n      });\n    }\n\n    if (giphyState) {\n      var _updatedText = \"/giphy \".concat(message.text);\n\n      updatedMessage = _objectSpread(_objectSpread({}, message), {}, {\n        text: _updatedText\n      });\n    }\n\n    var sendMessagePromise = sendMessage(updatedMessage || message);\n    logChatPromiseExecution(sendMessagePromise, 'send message');\n    setGiphyState(false);\n  };\n\n  var messageInput = useMessageInput(_objectSpread(_objectSpread({}, props), {}, {\n    overrideSubmitHandler: overrideSubmitHandler\n  }));\n  var onChange = useCallback(function (e) {\n    var _e$nativeEvent;\n\n    var value = e.target.value;\n    var deletePressed = ((_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : _e$nativeEvent.inputType) === 'deleteContentBackward';\n\n    if (messageInput.text.length === 1 && deletePressed) {\n      setGiphyState(false);\n    }\n\n    if (!giphyState && messageInput.text.startsWith('/giphy') && !messageInput.numberOfUploads) {\n      e.target.value = value.replace('/giphy', '');\n      setGiphyState(true);\n    }\n\n    messageInput.handleChange(e);\n  }, [giphyState, messageInput]); // const onClickCommand = () => {\n  //   messageInput.textareaRef.current.focus();\n  //   messageInput.handleChange({\n  //     target: { value: '/' },\n  //     preventDefault: () => null,\n  //   });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"str-chat__messaging-input\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messaging-input__button emoji-button\",\n      role: \"button\",\n      \"aria-roledescription\": \"button\",\n      onClick: messageInput.openEmojiPicker,\n      ref: messageInput.emojiPickerRef,\n      children: /*#__PURE__*/_jsxDEV(EmojiIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(ImageDropzone, {\n      accept: acceptedFiles,\n      handleFiles: messageInput.uploadNewFiles,\n      multiple: multipleUploads,\n      disabled: maxNumberOfFiles !== undefined && messageInput.numberOfUploads >= maxNumberOfFiles || giphyState,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messaging-input__input-wrapper\",\n        children: [giphyState && !messageInput.numberOfUploads && /*#__PURE__*/_jsxDEV(GiphyIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 59\n        }, _this), /*#__PURE__*/_jsxDEV(UploadsPreview, _objectSpread({}, messageInput), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(ChatAutoComplete, {\n          commands: messageInput.getCommands(),\n          innerRef: messageInput.textareaRef,\n          handleSubmit: messageInput.handleSubmit,\n          onSelectItem: messageInput.onSelectItem,\n          onChange: onChange,\n          value: messageInput.text,\n          rows: 1,\n          maxRows: props.maxRows,\n          placeholder: \"Send a message\",\n          onPaste: messageInput.onPaste,\n          triggers: props.autocompleteTriggers,\n          grow: props.grow,\n          disabled: props.disabled,\n          additionalTextareaProps: props.additionalTextareaProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messaging-input__button\",\n      role: \"button\",\n      \"aria-roledescription\": \"button\",\n      onClick: messageInput.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(EmojiPicker, _objectSpread({}, messageInput), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(MessagingInput, \"HqN4oVPE2abM3cfIiRFZ7k1PWQs=\", false, function () {\n  return [useMessageInput];\n});\n\n_c2 = MessagingInput;\nexport default _c3 = /*#__PURE__*/React.memo(MessagingInput);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GiphyIcon\");\n$RefreshReg$(_c2, \"MessagingInput\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"sources":["/Users/annaisthebest/Desktop/hci-ClassMates/src/streamchats-code/src/components/MessagingInput/MessagingInput.js"],"names":["React","useCallback","useContext","useState","ImageDropzone","logChatPromiseExecution","ChannelContext","ChatAutoComplete","EmojiPicker","useMessageInput","EmojiIcon","LightningBoltSmall","SendIcon","UploadsPreview","GiphyIcon","MessagingInput","props","acceptedFiles","maxNumberOfFiles","multipleUploads","sendMessage","giphyState","setGiphyState","overrideSubmitHandler","message","updatedMessage","attachments","length","text","startsWith","updatedText","replace","sendMessagePromise","messageInput","onChange","e","value","target","deletePressed","nativeEvent","inputType","numberOfUploads","handleChange","openEmojiPicker","emojiPickerRef","uploadNewFiles","undefined","getCommands","textareaRef","handleSubmit","onSelectItem","maxRows","onPaste","autocompleteTriggers","grow","disabled","additionalTextareaProps","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useState } from 'react';\nimport { ImageDropzone } from 'react-file-utils';\nimport { logChatPromiseExecution } from 'stream-chat';\nimport { ChannelContext, ChatAutoComplete, EmojiPicker, useMessageInput } from 'stream-chat-react';\n\nimport './MessagingInput.css';\n\nimport {\n  // CommandIcon,\n  EmojiIcon,\n  LightningBoltSmall,\n  SendIcon,\n} from '../../assets';\nimport { UploadsPreview } from './UploadsPreview';\n\nconst GiphyIcon = () => (\n  <div className='giphy-icon__wrapper'>\n    <LightningBoltSmall />\n    <p className='giphy-icon__text'>GIPHY</p>\n  </div>\n);\n\nconst MessagingInput = (props) => {\n  const { acceptedFiles, maxNumberOfFiles, multipleUploads, sendMessage } = useContext(ChannelContext);\n\n  const [giphyState, setGiphyState] = useState(false);\n\n  const overrideSubmitHandler = (message) => {\n    let updatedMessage;\n\n    if (message.attachments.length && message.text.startsWith('/giphy')) {\n      const updatedText = message.text.replace('/giphy', '');\n      updatedMessage = { ...message, text: updatedText };\n    }\n\n    if (giphyState) {\n      const updatedText = `/giphy ${message.text}`;\n      updatedMessage = { ...message, text: updatedText };\n    }\n\n    const sendMessagePromise = sendMessage(updatedMessage || message);\n    logChatPromiseExecution(sendMessagePromise, 'send message');\n\n    setGiphyState(false);\n  };\n\n  const messageInput = useMessageInput({ ...props, overrideSubmitHandler });\n\n  const onChange = useCallback(\n    (e) => {\n      const { value } = e.target;\n      const deletePressed = e.nativeEvent?.inputType === 'deleteContentBackward';\n\n      if (messageInput.text.length === 1 && deletePressed) {\n        setGiphyState(false);\n      }\n\n      if (!giphyState && messageInput.text.startsWith('/giphy') && !messageInput.numberOfUploads) {\n        e.target.value = value.replace('/giphy', '');\n        setGiphyState(true);\n      }\n\n      messageInput.handleChange(e);\n    },\n    [giphyState, messageInput],\n  );\n\n  // const onClickCommand = () => {\n  //   messageInput.textareaRef.current.focus();\n  //   messageInput.handleChange({\n  //     target: { value: '/' },\n  //     preventDefault: () => null,\n  //   });\n  // };\n\n  return (\n    <div className='str-chat__messaging-input'>\n      <div\n        className='messaging-input__button emoji-button'\n        role='button'\n        aria-roledescription='button'\n        onClick={messageInput.openEmojiPicker}\n        ref={messageInput.emojiPickerRef}\n      >\n        <EmojiIcon />\n      </div>\n      {/* <div\n        className=\"messaging-input__button\"\n        role=\"button\"\n        aria-roledescription=\"button\"\n        onClick={onClickCommand}\n      >\n        <CommandIcon />\n      </div> */}\n      <ImageDropzone\n        accept={acceptedFiles}\n        handleFiles={messageInput.uploadNewFiles}\n        multiple={multipleUploads}\n        disabled={(maxNumberOfFiles !== undefined && messageInput.numberOfUploads >= maxNumberOfFiles) || giphyState}\n      >\n        <div className='messaging-input__input-wrapper'>\n          {giphyState && !messageInput.numberOfUploads && <GiphyIcon />}\n          <UploadsPreview {...messageInput} />\n          <ChatAutoComplete\n            commands={messageInput.getCommands()}\n            innerRef={messageInput.textareaRef}\n            handleSubmit={messageInput.handleSubmit}\n            onSelectItem={messageInput.onSelectItem}\n            onChange={onChange}\n            value={messageInput.text}\n            rows={1}\n            maxRows={props.maxRows}\n            placeholder='Send a message'\n            onPaste={messageInput.onPaste}\n            triggers={props.autocompleteTriggers}\n            grow={props.grow}\n            disabled={props.disabled}\n            additionalTextareaProps={props.additionalTextareaProps}\n          />\n        </div>\n      </ImageDropzone>\n      <div className='messaging-input__button' role='button' aria-roledescription='button' onClick={messageInput.handleSubmit}>\n        <SendIcon />\n      </div>\n      <EmojiPicker {...messageInput} />\n    </div>\n  );\n};\n\nexport default React.memo(MessagingInput);\n"]},"metadata":{},"sourceType":"module"}