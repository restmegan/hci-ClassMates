{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nvar NativeViewGestureHandler = /*#__PURE__*/function (_PressGestureHandler) {\n  _inherits(NativeViewGestureHandler, _PressGestureHandler);\n\n  var _super = _createSuper(NativeViewGestureHandler);\n\n  function NativeViewGestureHandler() {\n    _classCallCheck(this, NativeViewGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(NativeViewGestureHandler, [{\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n\n      _get(_getPrototypeOf(NativeViewGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!ev.isFinal) {\n        // if (this.ref instanceof ScrollView) {\n        if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n          x: ev.deltaX,\n          y: ev.deltaY\n        }), 10)) {\n          // @ts-ignore FIXME(TS) config type\n          if (this.config.disallowInterruption) {\n            var gestures = Object.values(NodeManager.getNodes()).filter(function (gesture) {\n              var handlerTag = gesture.handlerTag,\n                  view = gesture.view,\n                  isGestureRunning = gesture.isGestureRunning;\n              return (// Check if this gesture isn't self\n                handlerTag !== _this.handlerTag && // Ensure the gesture needs to be cancelled\n                isGestureRunning && // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler && // Ensure a view exists and is a child of the current view\n                view && // @ts-ignore FIXME(TS) view type\n                _this.view.contains(view)\n              );\n            }); // Cancel all of the gestures that passed the filter\n\n            var _iterator = _createForOfIteratorHelper(gestures),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var gesture = _step.value;\n                // TODO: Bacon: Send some cached event.\n                gesture.forceInvalidate(ev);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return NativeViewGestureHandler;\n}(PressGestureHandler);\n\nexport default NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["onRawEvent","ev","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","deltaY","gestures","NodeManager","gesture","isGestureRunning","handlerTag"],"mappings":";;;;;;;AAAA,OAAA,sBAAA,MAAA,0BAAA;AAEA,OAAO,KAAP,WAAA,MAAA,eAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,SAAA,mBAAA,EAAA,UAAA,QAAA,SAAA;;IAEA,wB;;;;;;;;;;;;;WACEA,oBAAU,EAAVA,EAA+B;AAAA;;AAC7B,+FAAA,EAAA;;AACA,UAAI,CAACC,EAAE,CAAP,OAAA,EAAiB;AACf;AACA,YAAIC,mBAAmB,CAACC,UAAU,CAAC;AAAEC,UAAAA,CAAC,EAAEH,EAAE,CAAP,MAAA;AAAgBI,UAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,SAAD,CAAX,EAAvB,EAAuB,CAAvB,EAAyE;AACvE;AACA,cAAI,KAAA,MAAA,CAAJ,oBAAA,EAAsC;AACpC,gBAAMC,QAAQ,GAAG,MAAM,CAAN,MAAA,CAAcC,WAAW,CAAzB,QAAcA,EAAd,EAAA,MAAA,CACdC,UAAAA,OAAD,EAAa;AAAA,kBACL,UADK,GACX,OADW,CACL,UADK;AAAA,kBACL,IADK,GACX,OADW,CACL,IADK;AAAA,kBACeC,gBADf,GACX,OADW,CACeA,gBADf;AAEX,qBACE;AACAC,gBAAAA,UAAU,KAAK,KAAA,CAAfA,UAAAA,IACA;AADAA,gBAAAA,gBAAAA,IAGA;AACAF,gBAAAA,OAAO,YAJPE,sBAAAA,IAKA;AALAA,gBAAAA,IAAAA,IAOA;AACA,gBAAA,KAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA;AAVF;AAJgC,aACnB,CAAjB,CADoC,CAkBpC;;AAlBoC,uDAmBpC,QAnBoC;AAAA;;AAAA;AAmBpC,kEAAgC;AAAA,oBAAhC,OAAgC;AAC9B;AACAF,gBAAAA,OAAO,CAAPA,eAAAA,CAAAA,EAAAA;AACD;AAtBmC;AAAA;AAAA;AAAA;AAAA;AAuBrC;AACF;AACF;AACF;;;;EAjCH,mB;;AAoCA,eAAA,wBAAA","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"module"}