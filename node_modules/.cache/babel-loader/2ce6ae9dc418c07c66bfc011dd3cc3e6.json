{"ast":null,"code":"/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, Promise */\n;\n\n(function (factory) {\n  'use strict';\n\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'));\n  } else {\n    // Browser globals:\n    factory(window.loadImage);\n  }\n})(function (loadImage) {\n  'use strict';\n\n  var global = loadImage.global;\n\n  if (global.fetch && global.Request && global.Response && global.Response.prototype.blob) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      /**\n       * Fetch response handler.\n       *\n       * @param {Response} response Fetch response\n       * @returns {Blob} Fetched Blob.\n       */\n      function responseHandler(response) {\n        return response.blob();\n      }\n\n      if (global.Promise && typeof callback !== 'function') {\n        return fetch(new Request(url, callback)).then(responseHandler);\n      }\n\n      fetch(new Request(url, options)).then(responseHandler).then(callback)[// Avoid parsing error in IE<9, where catch is a reserved word.\n      // eslint-disable-next-line dot-notation\n      'catch'](function (err) {\n        callback(null, err);\n      });\n    };\n  } else if (global.XMLHttpRequest && // https://xhr.spec.whatwg.org/#the-responsetype-attribute\n  new XMLHttpRequest().responseType === '') {\n    loadImage.fetchBlob = function (url, callback, options) {\n      /**\n       * Promise executor\n       *\n       * @param {Function} resolve Resolution function\n       * @param {Function} reject Rejection function\n       */\n      function executor(resolve, reject) {\n        options = options || {}; // eslint-disable-line no-param-reassign\n\n        var req = new XMLHttpRequest();\n        req.open(options.method || 'GET', url);\n\n        if (options.headers) {\n          Object.keys(options.headers).forEach(function (key) {\n            req.setRequestHeader(key, options.headers[key]);\n          });\n        }\n\n        req.withCredentials = options.credentials === 'include';\n        req.responseType = 'blob';\n\n        req.onload = function () {\n          resolve(req.response);\n        };\n\n        req.onerror = req.onabort = req.ontimeout = function (err) {\n          if (resolve === reject) {\n            // Not using Promises\n            reject(null, err);\n          } else {\n            reject(err);\n          }\n        };\n\n        req.send(options.body);\n      }\n\n      if (global.Promise && typeof callback !== 'function') {\n        options = callback; // eslint-disable-line no-param-reassign\n\n        return new Promise(executor);\n      }\n\n      return executor(callback, callback);\n    };\n  }\n});","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/blueimp-load-image/js/load-image-fetch.js"],"names":["factory","define","amd","module","exports","require","window","loadImage","global","fetch","Request","Response","prototype","blob","fetchBlob","url","callback","options","responseHandler","response","Promise","then","err","XMLHttpRequest","responseType","executor","resolve","reject","req","open","method","headers","Object","keys","forEach","key","setRequestHeader","withCredentials","credentials","onload","onerror","onabort","ontimeout","send","body"],"mappings":"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","sourcesContent":["/*\n * JavaScript Load Image Fetch\n * https://github.com/blueimp/JavaScript-Load-Image\n *\n * Copyright 2017, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * https://opensource.org/licenses/MIT\n */\n\n/* global define, module, require, Promise */\n\n;(function (factory) {\n  'use strict'\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define(['./load-image'], factory)\n  } else if (typeof module === 'object' && module.exports) {\n    factory(require('./load-image'))\n  } else {\n    // Browser globals:\n    factory(window.loadImage)\n  }\n})(function (loadImage) {\n  'use strict'\n\n  var global = loadImage.global\n\n  if (\n    global.fetch &&\n    global.Request &&\n    global.Response &&\n    global.Response.prototype.blob\n  ) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      /**\n       * Fetch response handler.\n       *\n       * @param {Response} response Fetch response\n       * @returns {Blob} Fetched Blob.\n       */\n      function responseHandler(response) {\n        return response.blob()\n      }\n      if (global.Promise && typeof callback !== 'function') {\n        return fetch(new Request(url, callback)).then(responseHandler)\n      }\n      fetch(new Request(url, options))\n        .then(responseHandler)\n        .then(callback)\n        [\n          // Avoid parsing error in IE<9, where catch is a reserved word.\n          // eslint-disable-next-line dot-notation\n          'catch'\n        ](function (err) {\n          callback(null, err)\n        })\n    }\n  } else if (\n    global.XMLHttpRequest &&\n    // https://xhr.spec.whatwg.org/#the-responsetype-attribute\n    new XMLHttpRequest().responseType === ''\n  ) {\n    loadImage.fetchBlob = function (url, callback, options) {\n      /**\n       * Promise executor\n       *\n       * @param {Function} resolve Resolution function\n       * @param {Function} reject Rejection function\n       */\n      function executor(resolve, reject) {\n        options = options || {} // eslint-disable-line no-param-reassign\n        var req = new XMLHttpRequest()\n        req.open(options.method || 'GET', url)\n        if (options.headers) {\n          Object.keys(options.headers).forEach(function (key) {\n            req.setRequestHeader(key, options.headers[key])\n          })\n        }\n        req.withCredentials = options.credentials === 'include'\n        req.responseType = 'blob'\n        req.onload = function () {\n          resolve(req.response)\n        }\n        req.onerror = req.onabort = req.ontimeout = function (err) {\n          if (resolve === reject) {\n            // Not using Promises\n            reject(null, err)\n          } else {\n            reject(err)\n          }\n        }\n        req.send(options.body)\n      }\n      if (global.Promise && typeof callback !== 'function') {\n        options = callback // eslint-disable-line no-param-reassign\n        return new Promise(executor)\n      }\n      return executor(callback, callback)\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}