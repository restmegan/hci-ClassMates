{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\n\nvar notifyParent = function notifyParent(parent) {\n  return function (message) {\n    window.parent.postMessage(message, parent);\n  };\n};\n\nvar YOUTUBE_LINK = 'https://youtu.be/Ujvy-DEA-UM'; // We have to keep this task list up-to-date with the website's checklist\n\nvar REACT_TO_MESSAGE = 'react-to-message',\n    RUN_GIPHY = 'run-giphy',\n    SEND_YOUTUBE = 'send-youtube',\n    DRAG_DROP = 'drag-drop-image',\n    START_THREAD = 'start-thread',\n    SEND_MESSAGE = 'send-message';\nexport var useChecklist = function useChecklist(chatClient, targetOrigin) {\n  _s();\n\n  useEffect(function () {\n    var notify = notifyParent(targetOrigin);\n\n    var handleNewEvent = function handleNewEvent(_ref) {\n      var type = _ref.type,\n          message = _ref.message;\n\n      switch (type) {\n        case 'reaction.new':\n          notify(REACT_TO_MESSAGE);\n          break;\n\n        case 'message.new':\n          if (message.command === 'giphy') {\n            notify(RUN_GIPHY);\n            break;\n          }\n\n          ;\n\n          if (message.attachments.length) {\n            if (message.attachments[0].type === 'video' && message.attachments[0].og_scrape_url === YOUTUBE_LINK) {\n              notify(SEND_YOUTUBE);\n              break;\n            }\n\n            if (message.attachments[0].type === 'image') {\n              notify(DRAG_DROP);\n              break;\n            }\n          }\n\n          if (message.parent_id) {\n            notify(START_THREAD);\n            break;\n          }\n\n          notify(SEND_MESSAGE);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    if (chatClient) {\n      chatClient.on(handleNewEvent);\n    }\n\n    return function () {\n      return chatClient === null || chatClient === void 0 ? void 0 : chatClient.off(handleNewEvent);\n    };\n  }, [chatClient, targetOrigin]);\n};\n\n_s(useChecklist, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/ChatPageUI/src/ChecklistTasks.js"],"names":["useEffect","notifyParent","parent","message","window","postMessage","YOUTUBE_LINK","REACT_TO_MESSAGE","RUN_GIPHY","SEND_YOUTUBE","DRAG_DROP","START_THREAD","SEND_MESSAGE","useChecklist","chatClient","targetOrigin","notify","handleNewEvent","type","command","attachments","length","og_scrape_url","parent_id","on","off"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD;AAAA,SAAY,UAACC,OAAD,EAAa;AAC5CC,IAAAA,MAAM,CAACF,MAAP,CAAcG,WAAd,CAA0BF,OAA1B,EAAmCD,MAAnC;AACD,GAFoB;AAAA,CAArB;;AAIA,IAAMI,YAAY,GAAG,8BAArB,C,CAEA;;IACOC,gB,GACL,kB;IADuBC,S,GAEvB,W;IAFkCC,Y,GAGlC,c;IAHgDC,S,GAIhD,iB;IAJ2DC,Y,GAK3D,c;IALyEC,Y,GAMzE,c;AAGF,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,UAAD,EAAaC,YAAb,EAA8B;AAAA;;AACxDf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMgB,MAAM,GAAGf,YAAY,CAACc,YAAD,CAA3B;;AACA,QAAME,cAAc,GAAG,SAAjBA,cAAiB,OAAuB;AAAA,UAApBC,IAAoB,QAApBA,IAAoB;AAAA,UAAdf,OAAc,QAAdA,OAAc;;AAC5C,cAAOe,IAAP;AACE,aAAK,cAAL;AACEF,UAAAA,MAAM,CAACT,gBAAD,CAAN;AACA;;AACF,aAAK,aAAL;AACE,cAAIJ,OAAO,CAACgB,OAAR,KAAoB,OAAxB,EAAiC;AAC/BH,YAAAA,MAAM,CAACR,SAAD,CAAN;AACA;AACD;;AAAA;;AACD,cAAIL,OAAO,CAACiB,WAAR,CAAoBC,MAAxB,EAAgC;AAC9B,gBAAIlB,OAAO,CAACiB,WAAR,CAAoB,CAApB,EAAuBF,IAAvB,KAAgC,OAAhC,IAA2Cf,OAAO,CAACiB,WAAR,CAAoB,CAApB,EAAuBE,aAAvB,KAAyChB,YAAxF,EAAsG;AACpGU,cAAAA,MAAM,CAACP,YAAD,CAAN;AACA;AACD;;AACD,gBAAIN,OAAO,CAACiB,WAAR,CAAoB,CAApB,EAAuBF,IAAvB,KAAgC,OAApC,EAA6C;AAC3CF,cAAAA,MAAM,CAACN,SAAD,CAAN;AACA;AACD;AACF;;AACD,cAAIP,OAAO,CAACoB,SAAZ,EAAuB;AACrBP,YAAAA,MAAM,CAACL,YAAD,CAAN;AACA;AACD;;AACDK,UAAAA,MAAM,CAACJ,YAAD,CAAN;AACA;;AACF;AACE;AA1BJ;AA4BD,KA7BD;;AA8BA,QAAIE,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAACU,EAAX,CAAcP,cAAd;AACD;;AACD,WAAO;AAAA,aAAMH,UAAN,aAAMA,UAAN,uBAAMA,UAAU,CAAEW,GAAZ,CAAgBR,cAAhB,CAAN;AAAA,KAAP;AACD,GApCQ,EAoCN,CAACH,UAAD,EAAaC,YAAb,CApCM,CAAT;AAqCD,CAtCM;;GAAMF,Y","sourcesContent":["import { useEffect } from 'react';\n\nconst notifyParent = (parent) => (message) => {\n  window.parent.postMessage(message, parent);\n}\n\nconst YOUTUBE_LINK = 'https://youtu.be/Ujvy-DEA-UM';\n\n// We have to keep this task list up-to-date with the website's checklist\nconst [REACT_TO_MESSAGE, RUN_GIPHY, SEND_YOUTUBE, DRAG_DROP, START_THREAD, SEND_MESSAGE] = [\n  'react-to-message',\n  'run-giphy',\n  'send-youtube',\n  'drag-drop-image',\n  'start-thread',\n  'send-message',\n];\n\nexport const useChecklist = (chatClient, targetOrigin) => {\n  useEffect(() => {\n    const notify = notifyParent(targetOrigin);\n    const handleNewEvent = ({ type, message }) => {\n      switch(type) {\n        case 'reaction.new':\n          notify(REACT_TO_MESSAGE);\n          break;\n        case 'message.new':\n          if (message.command === 'giphy') {\n            notify(RUN_GIPHY);\n            break;\n          };\n          if (message.attachments.length) {\n            if (message.attachments[0].type === 'video' && message.attachments[0].og_scrape_url === YOUTUBE_LINK) {\n              notify(SEND_YOUTUBE);\n              break;\n            }\n            if (message.attachments[0].type === 'image') {\n              notify(DRAG_DROP);\n              break\n            }\n          }\n          if (message.parent_id) {\n            notify(START_THREAD);\n            break;\n          }\n          notify(SEND_MESSAGE);\n          break;\n        default:\n          break;\n      }\n    }\n    if (chatClient) {\n      chatClient.on(handleNewEvent);\n    }\n    return () => chatClient?.off(handleNewEvent);\n  }, [chatClient, targetOrigin]);\n};\n"]},"metadata":{},"sourceType":"module"}