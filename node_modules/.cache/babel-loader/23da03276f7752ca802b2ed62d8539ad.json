{"ast":null,"code":"import _classCallCheck from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/InboxComponent.js\";\nimport React, { Component } from \"react\";\nimport Talk from \"talkjs\";\nimport \"./styles.css\";\nimport { useState } from 'react'; //import SampleData from \"./SampleData\"\n// Creates a TalkJS user assuming that the currentUser is passed as a prop to\n// our component. The Talk.User object is used to synchronize user data with\n// TalkJS, so we can display it inside the chat UI.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar InboxComponent = /*#__PURE__*/function (_Component) {\n  _inherits(InboxComponent, _Component);\n\n  var _super = _createSuper(InboxComponent);\n\n  //Creating a ref\n  function InboxComponent(props) {\n    var _this;\n\n    _classCallCheck(this, InboxComponent);\n\n    _this = _super.call(this, props);\n    _this.talkjsContainer = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(InboxComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var currentUser = this.props.currentUser;\n      Talk.ready.then(function () {\n        var me = new Talk.User({\n          // Using dummy hardcode, the defining code is commented out for now\n          id: \"12345\",\n          //currentUser.id,\n          name: \"Alice\",\n          //currentUser.name,\n          email: \"alfie@example.com\",\n          //currentUser.email,\n          photoUrl: \"https://demo.talkjs.com/img/alice.jpg\",\n          //currentUser.photo,\n          welcomeMessage: \"Hey there! How are you? :-)\"\n        }); //Creating a TalkJS session. A session represents a user's active browser tab.\n        //It also authenticates your app with TalkJS.\n\n        if (!window.talkSession) {\n          window.talkSession = new Talk.Session({\n            appId: \"tNfx4wm8\",\n            //This is a custom appId generated from our TalkJS trial\n            me: me\n          }); // window.talkSession.setDesktopNotificationEnabled(\"\");\n        } // Hard-coded dummy users to test chatting with\n\n\n        var johnSmith = new Talk.User({\n          id: \"54321\",\n          name: \"John Smith\",\n          email: \"johnsmith@example.com\",\n          photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n          welcomeMessage: \"Hi! How's it going?\"\n        });\n        var lucyEaton = new Talk.User({\n          id: \"01010\",\n          name: \"Lucy Eaton\",\n          email: \"lucyeaton@example.com\",\n          photoUrl: \"https://thumbs.dreamstime.com/b/friendly-adult-casual-dressed-business-woman-student-girl-standing-straight-headshot-portrait-office-183889436.jpg\",\n          welcomeMessage: \"Hello! Good to see you in class today :)\"\n        }); // Creating sample conversation. oneOnOneId is a helper method that\n        // generates a unique conversation ID for a given pair of users.\n\n        var conversation = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, johnSmith));\n        conversation.setParticipant(me);\n        conversation.setParticipant(johnSmith); // Creating some more filler coversations with our SampleData\n\n        var convoLucy = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, lucyEaton));\n        convoLucy.setParticipant(me);\n        convoLucy.setParticipant(lucyEaton); // Creating an inbox\n\n        var inbox = window.talkSession.createInbox({\n          selected: conversation\n        });\n        var inboxTwo = window.talkSession.createInbox({\n          selected: convoLucy\n        });\n        inbox.mount(_this2.talkjsContainer.current); //Mounting the inbox\n\n        inboxTwo.mount(_this2.talkjsContainer.current);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: '500px'\n        },\n        ref: this.talkjsContainer,\n        className: \"InboxComponent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return InboxComponent;\n}(Component);\n\nexport default InboxComponent;","map":{"version":3,"sources":["/Users/akshatdhankher/Desktop/HCI/hci-ClassMates/src/InboxComponent.js"],"names":["React","Component","Talk","useState","InboxComponent","props","talkjsContainer","createRef","currentUser","ready","then","me","User","id","name","email","photoUrl","welcomeMessage","window","talkSession","Session","appId","johnSmith","lucyEaton","conversation","getOrCreateConversation","oneOnOneId","setParticipant","convoLucy","inbox","createInbox","selected","inboxTwo","mount","current","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Talk from \"talkjs\";\n\nimport \"./styles.css\";\nimport {useState} from 'react';\n//import SampleData from \"./SampleData\"\n\n// Creates a TalkJS user assuming that the currentUser is passed as a prop to\n// our component. The Talk.User object is used to synchronize user data with\n// TalkJS, so we can display it inside the chat UI.\nclass InboxComponent extends Component {\n\n  //Creating a ref\n  constructor(props) {\n    super(props);\n    this.talkjsContainer = React.createRef();\n  }\n\n  componentDidMount() {\n    const currentUser = this.props.currentUser;\n    Talk.ready.then(() => {\n      var me = new Talk.User({\n        // Using dummy hardcode, the defining code is commented out for now\n        id: \"12345\", //currentUser.id,\n        name: \"Alice\", //currentUser.name,\n        email: \"alfie@example.com\", //currentUser.email,\n        photoUrl: \"https://demo.talkjs.com/img/alice.jpg\", //currentUser.photo,\n        welcomeMessage: \"Hey there! How are you? :-)\"\n      });\n\n      //Creating a TalkJS session. A session represents a user's active browser tab.\n      //It also authenticates your app with TalkJS.\n      if (!window.talkSession) {\n        window.talkSession = new Talk.Session({\n          appId: \"tNfx4wm8\",  //This is a custom appId generated from our TalkJS trial\n          me: me\n        });\n        // window.talkSession.setDesktopNotificationEnabled(\"\");\n      }\n\n      // Hard-coded dummy users to test chatting with\n      var johnSmith = new Talk.User({\n        id: \"54321\",\n        name: \"John Smith\",\n        email: \"johnsmith@example.com\",\n        photoUrl: \"https://demo.talkjs.com/img/sebastian.jpg\",\n        welcomeMessage: \"Hi! How's it going?\"\n      });\n\n      var lucyEaton = new Talk.User({\n        id: \"01010\",\n        name: \"Lucy Eaton\",\n        email: \"lucyeaton@example.com\",\n        photoUrl: \"https://thumbs.dreamstime.com/b/friendly-adult-casual-dressed-business-woman-student-girl-standing-straight-headshot-portrait-office-183889436.jpg\",\n        welcomeMessage: \"Hello! Good to see you in class today :)\"\n      });\n\n      // Creating sample conversation. oneOnOneId is a helper method that\n      // generates a unique conversation ID for a given pair of users.\n      var conversation = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, johnSmith));\n      conversation.setParticipant(me);\n      conversation.setParticipant(johnSmith);\n\n      // Creating some more filler coversations with our SampleData\n      var convoLucy = window.talkSession.getOrCreateConversation(Talk.oneOnOneId(me, lucyEaton))\n      convoLucy.setParticipant(me);\n      convoLucy.setParticipant(lucyEaton);\n\n      // Creating an inbox\n      var inbox = window.talkSession.createInbox({selected: conversation});\n      var inboxTwo = window.talkSession.createInbox({selected: convoLucy});\n      inbox.mount(this.talkjsContainer.current); //Mounting the inbox\n      inboxTwo.mount(this.talkjsContainer.current);\n    });\n  }\n\n  render() {\n    return (<div style={{height: '500px'}} ref={this.talkjsContainer} className=\"InboxComponent\"></div>)\n  }\n\n}\n\n\nexport default InboxComponent;\n"]},"metadata":{},"sourceType":"module"}