var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import FileIcon from './FileIcon';
import LoadingIndicator from './LoadingIndicator';
/**
 * Component that displays files which are being uploaded
 *
 * @example ./examples/FilePreviewer.md
 */
var FilePreviewer = function (_a) {
    var uploads = _a.uploads, handleRemove = _a.handleRemove, handleRetry = _a.handleRetry;
    return (_jsx("div", __assign({ className: "rfu-file-previewer" }, { children: _jsx("ol", { children: uploads &&
                uploads.map(function (upload) { return (_jsxs("li", __assign({ className: "rfu-file-previewer__file " + (upload.state === 'uploading'
                        ? 'rfu-file-previewer__file--uploading'
                        : '') + " " + (upload.state === 'failed'
                        ? 'rfu-file-previewer__file--failed'
                        : '') }, { children: [_jsx(FileIcon, { mimeType: upload.file.type, filename: upload.file.name }, void 0),
                        _jsxs("a", __assign({ href: upload.url, download: true }, { children: [upload.file.name, upload.state === 'failed' && (_jsxs(React.Fragment, { children: [_jsx("div", __assign({ className: "rfu-file-previewer__failed", onClick: handleRetry && (function () { return handleRetry(upload.id); }) }, { children: "failed" }), void 0),
                                        _jsx("div", __assign({ className: "rfu-file-previewer__retry", onClick: handleRetry && (function () { return handleRetry(upload.id); }) }, { children: "retry" }), void 0)] }, void 0))] }), void 0),
                        _jsx("span", __assign({ className: "rfu-file-previewer__close-button", onClick: handleRemove && (function () { return handleRemove(upload.id); }) }, { children: "\u2718" }), void 0),
                        upload.state === 'uploading' && (_jsx("div", __assign({ className: "rfu-file-previewer__loading-indicator" }, { children: _jsx(LoadingIndicator, {}, void 0) }), void 0))] }), upload.id)); }) }, void 0) }), void 0));
};
export default FilePreviewer;
