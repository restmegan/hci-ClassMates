var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useState, useCallback, useEffect } from 'react';
import IconButton from './IconButton';
import placeholder from '../images/placeholder-generic.png';
import loadImage from 'blueimp-load-image';
var svg = '<svg width="28" height="28" viewBox="0 0 28 28" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path d="M465 5c5.53 0 10 4.47 10 10s-4.47 10-10 10-10-4.47-10-10 4.47-10 10-10zm3.59 5L465 13.59 461.41 10 460 11.41l3.59 3.59-3.59 3.59 1.41 1.41 3.59-3.59 3.59 3.59 1.41-1.41-3.59-3.59 3.59-3.59-1.41-1.41z" id="b"/><filter x="-30%" y="-30%" width="160%" height="160%" filterUnits="objectBoundingBox" id="a"><feOffset in="SourceAlpha" result="shadowOffsetOuter1"/><feGaussianBlur stdDeviation="2" in="shadowOffsetOuter1" result="shadowBlurOuter1"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0" in="shadowBlurOuter1"/></filter></defs><g transform="translate(-451 -1)" fill-rule="nonzero" fill="none"><use fill="#000" filter="url(#a)" xlink:href="#b"/><use fill="#FFF" fill-rule="evenodd" xlink:href="#b"/></g></svg>';
/**
 * Component is described here.
 *
 * @example ./examples/Thumbnail.md
 */
var Thumbnail = function (props) {
    var id = props.id, image = props.image, _a = props.size, size = _a === void 0 ? 100 : _a, handleClose = props.handleClose;
    var _b = useState(null), imgSrc = _b[0], setImgSrc = _b[1];
    useEffect(function () {
        if (!imgSrc && image) {
            /**
            if the file is already uploaded we don't need to process the image
            we check to see if it's base64 string or a url
            */
            if (!image.indexOf('data:')) {
                return setImgSrc(image);
            }
            loadImage(image, function (img) {
                if (!('toDataURL' in img))
                    return;
                var base64data = img.toDataURL('image/jpeg');
                setImgSrc(base64data);
            }, { orientation: true, crossOrigin: 'anonymous', meta: true });
        }
    }, [imgSrc, image]);
    var onClose = useCallback(function () {
        if (handleClose) {
            handleClose(id);
        }
    }, [id, handleClose]);
    return (_jsxs("div", __assign({ className: "rfu-thumbnail__wrapper", style: { width: size, height: size } }, { children: [_jsx("div", __assign({ className: "rfu-thumbnail__overlay" }, { children: handleClose ? (_jsx(IconButton, __assign({ onClick: onClose }, { children: _jsx("div", { dangerouslySetInnerHTML: { __html: svg } }, void 0) }), void 0)) : null }), void 0),
            _jsx("img", { src: imgSrc || image || placeholder, className: "rfu-thumbnail__image", alt: "" }, void 0)] }), void 0));
};
export default Thumbnail;
