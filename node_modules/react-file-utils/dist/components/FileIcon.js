var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { jsx as _jsx } from "react/jsx-runtime";
import * as React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { default as BigFileIcon, defaultStyles, } from 'react-file-icon';
import { faFileWord, faFileExcel, faFilePowerpoint, faFileArchive, faFileCode, faFileAudio, faFileVideo, faFileImage, faFilePdf, faFileAlt, faFile, } from '@fortawesome/free-regular-svg-icons';
// Partially based on:
// https://stackoverflow.com/a/4212908/2570866
var wordMimeTypes = [
    // Microsoft Word
    // .doc .dot
    'application/msword',
    // .doc .dot
    'application/msword-template',
    // .docx
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    // .dotx (no test)
    'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
    // .docm
    'application/vnd.ms-word.document.macroEnabled.12',
    // .dotm (no test)
    'application/vnd.ms-word.template.macroEnabled.12',
    // LibreOffice/OpenOffice Writer
    // .odt
    'application/vnd.oasis.opendocument.text',
    // .ott
    'application/vnd.oasis.opendocument.text-template',
    // .fodt
    'application/vnd.oasis.opendocument.text-flat-xml',
];
var excelMimeTypes = [
    // .csv
    'text/csv',
    // TODO: maybe more data files
    // Microsoft Excel
    // .xls .xlt .xla (no test for .xla)
    'application/vnd.ms-excel',
    // .xlsx
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    // .xltx (no test)
    'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
    // .xlsm
    'application/vnd.ms-excel.sheet.macroEnabled.12',
    // .xltm (no test)
    'application/vnd.ms-excel.template.macroEnabled.12',
    // .xlam (no test)
    'application/vnd.ms-excel.addin.macroEnabled.12',
    // .xlsb (no test)
    'application/vnd.ms-excel.addin.macroEnabled.12',
    // LibreOffice/OpenOffice Calc
    // .ods
    'application/vnd.oasis.opendocument.spreadsheet',
    // .ots
    'application/vnd.oasis.opendocument.spreadsheet-template',
    // .fods
    'application/vnd.oasis.opendocument.spreadsheet-flat-xml',
];
var powerpointMimeTypes = [
    // Microsoft Word
    // .ppt .pot .pps .ppa (no test for .ppa)
    'application/vnd.ms-powerpoint',
    // .pptx
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    // .potx (no test)
    'application/vnd.openxmlformats-officedocument.presentationml.template',
    // .ppsx
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
    // .ppam
    'application/vnd.ms-powerpoint.addin.macroEnabled.12',
    // .pptm
    'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
    // .potm
    'application/vnd.ms-powerpoint.template.macroEnabled.12',
    // .ppsm
    'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',
    // LibreOffice/OpenOffice Writer
    // .odp
    'application/vnd.oasis.opendocument.presentation',
    // .otp
    'application/vnd.oasis.opendocument.presentation-template',
    // .fodp
    'application/vnd.oasis.opendocument.presentation-flat-xml',
];
var archiveFileTypes = [
    // .zip
    'application/zip',
    // .z7
    'application/x-7z-compressed',
    // .ar
    'application/x-archive',
    // .tar
    'application/x-tar',
    // .tar.gz
    'application/gzip',
    // .tar.Z
    'application/x-compress',
    // .tar.bz2
    'application/x-bzip',
    // .tar.lz
    'application/x-lzip',
    // .tar.lz4
    'application/x-lz4',
    // .tar.lzma
    'application/x-lzma',
    // .tar.lzo (no test)
    'application/x-lzop',
    // .tar.xz
    'application/x-xz',
    // .war
    'application/x-webarchive',
    // .rar
    'application/vnd.rar',
];
var codeFileTypes = [
    // .html .htm
    'text/html',
    // .css
    'text/css',
    // .js
    'application/x-javascript',
    // .json
    'application/json',
    // .py
    'text/x-python',
    // .go
    'text/x-go',
    // .c
    'text/x-csrc',
    // .cpp
    'text/x-c++src',
    // .rb
    'application/x-ruby',
    // .rust
    'text/rust',
    // .java
    'text/x-java',
    // .php
    'application/x-php',
    // .cs
    'text/x-csharp',
    // .scala
    'text/x-scala',
    // .erl
    'text/x-erlang',
    // .sh
    'application/x-shellscript',
];
var mimeTypeToIconMap = {
    'application/pdf': faFilePdf,
};
var mimeTypeToFallBackStyle = {
    'application/pdf': defaultStyles.pdf,
};
for (var _i = 0, wordMimeTypes_1 = wordMimeTypes; _i < wordMimeTypes_1.length; _i++) {
    var type = wordMimeTypes_1[_i];
    mimeTypeToIconMap[type] = faFileWord;
    mimeTypeToFallBackStyle[type] = { type: 'document' };
}
for (var _a = 0, excelMimeTypes_1 = excelMimeTypes; _a < excelMimeTypes_1.length; _a++) {
    var type = excelMimeTypes_1[_a];
    mimeTypeToIconMap[type] = faFileExcel;
    mimeTypeToFallBackStyle[type] = { type: 'spreadsheet' };
}
for (var _b = 0, powerpointMimeTypes_1 = powerpointMimeTypes; _b < powerpointMimeTypes_1.length; _b++) {
    var type = powerpointMimeTypes_1[_b];
    mimeTypeToIconMap[type] = faFilePowerpoint;
    mimeTypeToFallBackStyle[type] = { type: 'presentation' };
}
for (var _c = 0, archiveFileTypes_1 = archiveFileTypes; _c < archiveFileTypes_1.length; _c++) {
    var type = archiveFileTypes_1[_c];
    mimeTypeToIconMap[type] = faFileArchive;
    mimeTypeToFallBackStyle[type] = { type: 'compressed' };
}
for (var _d = 0, codeFileTypes_1 = codeFileTypes; _d < codeFileTypes_1.length; _d++) {
    var type = codeFileTypes_1[_d];
    mimeTypeToIconMap[type] = faFileCode;
    mimeTypeToFallBackStyle[type] = { type: 'code' };
}
function mimeTypeToIcon(mimeType) {
    if (mimeType == null) {
        return faFile;
    }
    var icon = mimeTypeToIconMap[mimeType];
    if (icon) {
        return icon;
    }
    if (mimeType.startsWith('audio/')) {
        return faFileAudio;
    }
    if (mimeType.startsWith('video/')) {
        return faFileVideo;
    }
    if (mimeType.startsWith('image/')) {
        return faFileImage;
    }
    if (mimeType.startsWith('text/')) {
        return faFileAlt;
    }
    return faFile;
}
function mimeTypeToStyle(mimeType) {
    if (mimeType == null) {
        return {};
    }
    var style = mimeTypeToFallBackStyle[mimeType];
    if (style) {
        return style;
    }
    if (mimeType.startsWith('audio/')) {
        return { type: 'audio' };
    }
    if (mimeType.startsWith('video/')) {
        return { type: 'video' };
    }
    if (mimeType.startsWith('image/')) {
        return { type: 'image' };
    }
    if (mimeType.startsWith('text/')) {
        return { type: 'document' };
    }
    return {};
}
function fileExtension(filename) {
    var _a, _b;
    var defaultReturn = {
        full: '',
        end: '',
    };
    if (filename == null) {
        return defaultReturn;
    }
    // source: https://stackoverflow.com/a/1203361/2570866
    var a = filename.split('.');
    if (a.length === 1 || (a[0] === '' && a.length === 2)) {
        return defaultReturn;
    }
    var lastExtension = (_a = a.pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase();
    if (a.length === 1 || (a[0] === '' && a.length === 2)) {
        return { end: lastExtension, full: lastExtension };
    }
    var secondToLastExtension = (_b = a.pop()) === null || _b === void 0 ? void 0 : _b.toLowerCase();
    if (secondToLastExtension !== 'tar') {
        return { end: lastExtension, full: lastExtension };
    }
    return {
        full: secondToLastExtension + '.' + lastExtension,
        end: lastExtension,
    };
}
/**
 * @example ./examples/FileIcon.md
 */
var FileIcon = function (_a) {
    var _b = _a.big, big = _b === void 0 ? false : _b, _c = _a.size, size = _c === void 0 ? 50 : _c, filename = _a.filename, mimeType = _a.mimeType;
    if (big) {
        var extension = fileExtension(filename);
        var style = extension.end && defaultStyles[extension.end];
        if (!style) {
            style = mimeTypeToStyle(style);
        }
        // @ts-expect-error types for file-icon are for newer version, which doesn't have a default export
        return _jsx(BigFileIcon, __assign({ extension: extension.full }, style, { size: size }), void 0);
    }
    return (_jsx(FontAwesomeIcon, { className: "rfu-file-icon--small", icon: mimeTypeToIcon(mimeType) }, void 0));
};
export default FileIcon;
