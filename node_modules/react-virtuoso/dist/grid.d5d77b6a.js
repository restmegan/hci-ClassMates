// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"grid.tsx":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = App;

var React = _interopRequireWildcard(require("react"));

var _src = require("../src");

var _styled = _interopRequireDefault(require("@emotion/styled"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-wrap: wrap;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    flex: 1;\n    text-align: center;\n    font-size: 80%;\n    padding: 20px;\n    box-shadow: 0 5px 6px -6px #777;\n    background: white;\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  padding: 5px;\n  width: 25%;\n  background: #f5f5f5;\n  display: flex;\n  flex: none;\n  align-content: stretch;\n  /*\n  @media (max-width: 1024px) {\n    width: 33%;\n  }\n\n  @media (max-width: 768px) {\n    width: 50%;\n  }\n\n  @media (max-width: 480px) {\n    width: 100%;\n  }\n  */\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var ItemContainer = _styled.default.div(_templateObject());

var ItemWrapper = _styled.default.div(_templateObject2());

var ListContainer = _styled.default.div(_templateObject3());

function App() {
  var ref = React.createRef();
  return React.createElement(React.Fragment, null, React.createElement(_src.VirtuosoGrid, {
    ref: ref,
    components: {
      Item: ItemContainer,
      List: ListContainer,
      ScrollSeekPlaceholder: function ScrollSeekPlaceholder() {
        return React.createElement(ItemContainer, null, React.createElement(ItemWrapper, null, "Placeholder"));
      }
    },
    totalCount: 100,
    startReached: function startReached() {
      return console.log('start reached');
    },
    endReached: function endReached() {
      return console.log('end reached');
    },
    // rangeChanged={({ startIndex, endIndex }) => console.log({ startIndex, endIndex })}
    scrollSeekConfiguration: {
      enter: function enter(velocity) {
        return Math.abs(velocity) > 200;
      },
      exit: function exit(velocity) {
        return Math.abs(velocity) < 30;
      },
      change: function change(_, range) {
        return console.log({
          range: range
        });
      }
    },
    itemContent: function itemContent(index) {
      return React.createElement(ItemWrapper, null, "Item ", index);
    },
    style: {
      height: 300,
      width: 1200
    }
  }), React.createElement("button", {
    id: "start-30",
    onClick: function onClick() {
      return ref.current.scrollToIndex({
        index: 30,
        align: 'start'
      });
    }
  }, "Start 30"), React.createElement("button", {
    id: "center-50",
    onClick: function onClick() {
      return ref.current.scrollToIndex({
        index: 50,
        align: 'center'
      });
    }
  }, "Center 50"), React.createElement("button", {
    id: "end-99",
    onClick: function onClick() {
      return ref.current.scrollToIndex({
        index: 99,
        align: 'end'
      });
    }
  }, "End 99"));
}
},{"react":"../node_modules/react/index.js","../src":"../src/index.tsx","@emotion/styled":"../node_modules/@emotion/styled/dist/styled.browser.esm.js"}]},{},[], null)